{"./":{"url":"./","title":"目录","keywords":"","body":"学习之旅 gitbook "},"introduce.html":{"url":"introduce.html","title":"说明","keywords":"","body":""},"HTML/HTML.html":{"url":"HTML/HTML.html","title":"介绍","keywords":"","body":"HTML 知识结构 HTML被认为是前端知识体系里面最简单的知识，几年前，很多人都推荐在W3C上学习个几天就能够基本掌握。但随着HTML5和移动端的强势发展，HTML的技能点也越来越难。世上无难事，好学好总结。小火柴将HTML的知识体系进行了梳理和归纳，总结成以下目录 语法 基础语法 全局属性 设计原则 标签嵌套 条件注释 语法规范 结构 文档声明 文档头部 骨架结构 块级元素 内联元素 结构元素 交互元素 内容模型 标签 重点标签 锚点 图片 列表 框架 表格 DOM操作表格 多媒体 音频和视频 audio和video 音乐播放器 表单 form元素 input元素属性 input元素的type类型 表单控件 表单美化 "},"HTML/grammar/grammar_baseGrammer.html":{"url":"HTML/grammar/grammar_baseGrammer.html","title":"基础语法","keywords":"","body":"HTML基础语法   HTML文档的后缀一般都是.html，但是在以前，.htm后缀也是不少的，它们都代表html文档，实际上也没有本质的区别。htm是在win32时代，系统只能识别3位扩展名时使用的。现在一般都使用.html   概念   (Hyper Text Markup Language)超文本标记语言，是用来描述网页的一种语言   1. 超文本(Hyper Text):不只包括文本，也可以包括图片、链接、音乐、视频等非文本元素   2. 标记语言(Markup Language):标记语言是一套标记标签，HTML使用标记标签来描述网页   标签   由尖括号包围的关键词，比如   HTML 标签分为单标签和双标签   1. 双标签：HTML标签通常是成对出现的，比如 和 。第一个标签是开始标签，第二个标签是结束标签；开始标签和结束标签也被称为开放标签和闭合标签   2. 常见的单标签有：   注意：HTML标签对大小写不敏感，但要全小写   属性   HTML标签可以拥有属性，属性提供了有关HTML元素的更多信息。   属性以名值对(名称/值)的形式出现，且总是在HTML元素的开始标签中规定。 【常见属性】 属性名 属性作用 class 元素类名 id 元素ID style 元素的行内样式   元素   从开始标签到结束标签的所有代码   HTML元素以开始标签起始，以结束标签终止，元素的内容是开始标签与结束标签之间的内容。   文档   HTML文档被称为网页，由嵌套的HTML元素构成   注意：浏览器不会显示HTML标签，而是使用标签来解释页面的内容   注释   注释是在HTML插入的描述性文本，用来解释该代码或提示其他信息。   注意：注释只出现在代码中，不会在页面中显示；且注释不可嵌套   实体   HTML中某些字符是预留的，需要被替换为字符实体 显示结果描述实体名称实体编号   空格 &nbsp; &#160; 小于号 &lt; &#60; > 大于号 &gt; &#62; & 和号 &amp; &#38; \" 引号 &quot; &#34; ' 撇号  &apos;  &#39; ￠ 分 &cent; &#162; £ 镑 &pound; &#163; ¥ 日圆 &yen; &#165; € 欧元 &euro; &#8364; § 小节 &sect; &#167; © 版权 &copy; &#169; ® 注册商标 &reg; &#174; ™ 商标 &trade; &#8482; × 乘号 &times; &#215; ÷ 除号 &divide; &#247; "},"HTML/grammar/grammar_attribute.html":{"url":"HTML/grammar/grammar_attribute.html","title":"全局属性","keywords":"","body":"HTML的16个全局属性   在HTML中，属性能表达相当丰富的语义，而且属性也会额外提供很多实用的功能，HTML共支持16个常见的全局属性   HTML原有属性 accesskey   作用：浏览器用来创建激活或聚焦元素的快捷键   值：一个键盘字符如 O   范围：支持该属性的元素有、、、、、、   注意：使用该属性可能在新窗口打开链接时可能会被浏览器屏蔽 百度 阿里 腾讯 快捷键(alt+b)可以跳转到百度；快捷键(alt+a)可以跳转到阿里；快捷键(alt+t)可以跳转到腾讯 class   作用：规定元素的一个或多个类名   值：多个类名用空格分隔   注意：类名不能以数字开头   dir   作用：文字的方向   值：ltr/rtl/auto id   作用：规定元素的唯一标识   注意：若浏览器中出现多个id名的情况，CSS样式对所以该id名的元素都生效，但javascript脚本仅对第一个出现该id名的元素生效 lang   作用：规定元素内容的语言 en:英文 zh:中文 zh-CN：简体中文   zh 是中文，代表的是宏语言（Macrolanguage），zh 单独用表示中文整体，可以是方言、文言文、简繁体等混合内容。理论上 zh-CN 表示的是中国大陆中文，包含方言和简繁体，但默认指简体普通话。为了精准性，应该用独立语种替换，包括但不仅限于普通话和七大方言： cmn 普通话（官话、国语） wuu 吴语（江浙话、上海话）、czh 徽语（徽州话、严州话、吴语-徽严片） hak 客家语 yue 粤语（广东话） nan 闽南语（福建话、台语）、cpx 莆仙话（莆田话、兴化语）、cdo 闽东语、mnp 闽北语、zco 闽中语 gan 赣语（江西话） hsn 湘语（湖南话） cjy 晋语（山西话、陕北话）   以下所有 zh 开头写法已于 2009 年废弃，因为在语言学的分类上，中国语言学者多认为吴语、粤语、闽语等是汉语的方言，而西方学者多认为这些语言是一门和汉语同级关系的单独语种   以下两种写法均正确，后者描述更精准，但目前浏览器和操作系统都只支持前者，使用新标准可能会造成无法匹配浏览器用户定义字体、网页翻译、程序语言自动切换等功能，为了兼容性推荐使用前者 zh-CN 中文 (简体, 中国大陆) 对应 cmn-Hans-CN 普通话 (简体, 中国大陆) zh-SG 中文 (简体, 新加坡) 对应 cmn-Hans-SG 普通话 (简体, 新加坡) zh-HK 中文 (繁体, 香港) 对应 cmn-Hant-HK 普通话 (繁体, 香港) zh-MO 中文 (繁体, 澳门) 对应 cmn-Hant-MO 普通话 (繁体, 澳门) zh-TW 中文 (繁体, 台湾) 对应 cmn-Hant-TW 普通话 (繁体, 台湾)   style   作用：设置元素的行间样式   tabindex   作用：规定元素的tab键次序   值：number(1是第一个) 百度 阿里 腾讯 title   作用：规定关于元素的额外信息，鼠标移到元素上时显示一段提示文本 　   HTML5新增属性 contenteditable   作用：指定是否可以在浏览器里编辑内容   值：true/false   注意：设置document.designMode ='on'时，页面的任意位置都可以编辑；使用contenteditable ='true'则只对具体元素和其包含的元素起作用   移动端：移动端ios5以及android3之后才支持该属性   选中文字后，点击下列相应属性值可进行演示 contextmenu(没有浏览器支持)   作用：跟元素关联的右键菜单   值：元素中唯一ID   data-*   作用：用于存储页面或应用程序的私有定制数据   注意：属性名不应包含任何大写字母，且在前缀data-之后必须有至少一个字符；属性值可以是任意字符串   使用：可以在所有浏览器中使用getAttribute方法来获取data-*属性的值，也可以使用javascript中dataset属性访问data-*属性的值，不过IE10-浏览器不支持dataset   draggable(IE8-不支持)   作用：用户是否可以拖动元素   值：true/false/auto   注意：链接和图像默认是可拖动的   dropzone(所有浏览器都不支持)   作用：规定在拖动被拖动数据时是否进行复制、移动或链接   值：copy拷贝/move移动/link指向原始数据链接   hidden(IE7-不支持)   作用：显示或隐藏该元素(与display:none作用一样)   值：hidden=\"\" || hidden= \"hidden\"   spellcheck(IE9-不支持)   作用：规定是否对元素进行拼写和语法检查，对拼写错误的单词会在其下方出现红线   范围：可编辑区域（表单或contenteditable元素）   值：true/false   注意：移动端支持不好   translate(所有浏览器都不支持) 　作用：规定是否应该翻译元素内容 　值：yes/no "},"HTML/grammar/grammar_strategy.html":{"url":"HTML/grammar/grammar_strategy.html","title":"设计原则","keywords":"","body":"HTML5遵循的5个设计原则   实际上，html5并不是由w3c直接制定的，w3c的方向是xhtml2，而不是html5。当xhtml2脱离现实，无法付诸实践时，w3c工作组才将研究方向转向html5。为什么xhtml2从未落到实处？因为它违反了一条设计原理，这条设计原理就是著名的伯斯塔尔法则——发送时要保守；接收时要开放。而在html5设计过程中遵循了一系列原则，才使得html5得以快速推广   避免不必要的复杂性 【html4】 【html5】   【html4】 【html5】   支持已有内容   以下四段代码，在xhtml中只有第一段是正确的；而在html5中，所有的都是正确的 Hello world Hello world Hello world Hello world   解决现实的问题   在html4中，即使两个块级元素元素有相同的链接地址，也必须分开写，因为内联元素不能包含块级元素 Headline text Paragraph text.   而在html5中，由于使用了内容模型，元素也可以包含块级元素 Headline text Paragraph text.   内容模型   html5新增了多个元素，其中包括：section、article、aside和nav，它们代表了一种新的内容模型——给内容分区。以前人们一直都在用div来组织页面中的内容，但与其他类似的元素一样，div本身并没有语义。但section、article、aside和nav实际上是在明确地告诉你——这一块就像文档中的另一个文档一样。位于这些元素中的任何内容，都可以拥有自己的概要、标题，自己的脚部。   平稳退化   浏览器在遇到不识别的type值时，会将type的值解释为text input type=\"number\" input type=\"search\" input type=\"range\" input type=\"email\" input type=\"date\" input type=\"url\" "},"HTML/grammar/grammar_tagsNesting.html":{"url":"HTML/grammar/grammar_tagsNesting.html","title":"标签嵌套","keywords":"","body":"HTML标签嵌套规则   在html5中，元素的子元素可以是块级元素，这在以前是被认为不符合规则的。本文将详细介绍html5的标签嵌套规则   分类   html5出现之前，经常把元素按照block、inline、inline-block来区分。在html5中，元素不再按照display属性来区分，而是按照内容模型来区分，分为元数据型(metadata content)、区块型(sectioning content)、标题型(heading content)、文档流型(flow content)、语句型(phrasing content)、内嵌型(embedded content)、交互型(interactive content)。元素不属于任何一个类别，被称为穿透的；元素可能属于不止一个类别，称为混合的。   元数据元素(metadata content)是可以被用于说明其他内容的表现或行为，或者在当前文档和其他文档之间建立联系的元素 base link meta noscript script style template title 流元素(flow content)是在应用程序和文档的主体部分中使用的大部分元素 a abbr address area(如果它是map元素的子元素) article aside audio b bdi bdo blockquote br button canvas cite code data datalist del dfn div dl em embed fieldset figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd keygen label main map mark math meter nav noscript object ol output p pre progress q ruby s samp script section select small span strong sub sup svg table template textarea time u ul var video wbr text 区块型元素(sectioning content)是用于定义标题及页脚范围的元素 article aside nav section 标题型元素(heading content)定义一个区块/章节的标题 h1 h2 h3 h4 h5 h6 语句型元素(phrasing content)是用于标记段落级文本的元素 a abbr area (如果它是map元素的子级) audio b bdi bdo br button canvas cite code data datalist del dfn em embed i iframe img input ins kbd keygen label map mark math meter noscript object output progress q ruby s samp script select small span strong sub sup svg template textarea time u var video wbr text 嵌入型元素(embedded content)是引用或插入到文档中其他资源的元素 audio canvas embed iframe img math object svg video 交互型元素(interactive content)是专门用于与用户交互的元素 a audio(如果设置了controls属性) button embed iframe img(如果设置了usemap属性) input(如果type属性不为hidden) keygen label object(如果设置了usemap属性) select textarea video (如果设置了controls属性)   子元素 【1】子元素是流元素 、、、、、、、、 　　【1.1】子元素是流元素，不包括元素 、 　　【1.2】子元素是流元素，但不包括元素 　　【1.3】子元素是流元素，但不包括元素 　　【1.4】子元素是流元素，但不包括、、元素 、、 　　【1.5】子元素是流元素，但不包括、、区块型元素(sectioning content)、标题型元素(heading content) 、 　　【1.6】子元素是流元素，但不包括、、、区块型元素(sectioning content)、标题型元素(heading content) 　　【1.7】子元素是一个元素，紧跟着流元素 　　【1.8】子元素是一个元素，紧跟着流元素   【2】子元素是语句型元素 、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、 　　【2.1】子元素是语句型元素，但不包括和自身相同的元素 、、 　　【2.2】子元素是语句型元素，但不包括交互型元素(interactive content)   【3】子元素是transparent(以它的父元素允许的子元素为准) 、、 　　【3.1】子元素是transparent(以它的父元素允许的子元素为准)，但不包括交互型元素(interactive content) 　　【3.2】子元素可以没有、可以是元素，也可以是transparent(以它的父元素允许的子元素为准)   【4】无子元素 、、、、、、、、、、 　　【4.1】子元素可以没有、可以是元素，也可以是、元素 、 　　【4.2】子元素可以没有、可以是和元素，也可以是、元素 　　【4.3】子元素可以没有，可以是、，也可以是、元素 　　【4.4】子元素可以没有，可以是，也可以是、元素 　　【4.5】子元素可以没有、可以是元素 　　【4.6】子元素可以没有、也可以是元素，也可以是元素 、 　　【4.7】子元素可以没有，也可以是、元素 　　【4.8】子元素可以没有，可以是，也可以是、元素 、、 　　【4.9】子元素可以没有，可以是、，也可以是、元素   【5】子元素是、、、、，也可以是、元素   【6】子元素是文本内容 　　【6.1】子元素可以没有，也可以是文本内容   总结   关于每个元素的详细嵌套规则，上部分已经详细介绍。这部分主要对常用标签的嵌套规则进行总结 【1】、、、、、、的子元素是语句型元素 【2】、不可嵌套、 【3】的子元素是transparent(以它的父元素允许的子元素为准)，但不包括交互型元素(interactive content) 【4】不可嵌套 【5】子元素是语句型元素，不可嵌套交互型元素(interactive content) 【6】不可嵌套 【7】、不可嵌套、、区块型元素(sectioning content)、标题型元素(heading content) "},"HTML/grammar/grammar_IEComment.html":{"url":"HTML/grammar/grammar_IEComment.html","title":"条件注释","keywords":"","body":"HTML条件注释   IE条件注释是微软从IE5开始就提供的一种非标准逻辑语句，作用是可以灵活的为不同IE版本浏览器导入不同html元素。很显然这种方法的最大好处就在于属于微软官方给出的兼容解决办法而且还能通过W3C的效验   识别IE   因为从IE10开始，IE浏览器已经不再支持条件注释。所以下面的写法，只能识别IE9-浏览器   注意：两个--和左中括号[之间不能有空格，否则无效   识别单一IE 6 [if IE 6] 7 [if IE 7] 8 [if IE 8] 9 [if IE 9]   识别范围IE gt 　大于(greater than) gte 　　大于等于(greater than or equal) lt 小于(less than) lte 小于等于(less than or equal)   识别非IE   实际上识别的是IE10+浏览器和其他非IE浏览器 "},"HTML/grammar/grammar_standard.html":{"url":"HTML/grammar/grammar_standard.html","title":"语法规范","keywords":"","body":"HTML规范   HTML是描述网页结构的超文本标记语言，HTML规范能够使HTML代码风格保持一致，使得HTML更容易理解和维护。本文将详细介绍HTML规范   整体结构 【页面头部】   1、文件应以首行顶格开始，推荐使用   2、必须声明文档的编码charset，且与文件本身编码保持一致，指定字符编码的 meta 必须是 head 的第一个直接子元素。推荐使用UTF-8编码   3、根据页面内容和需求填写适当的keywords和description   4、页面title是不可缺少的一项，title 必须作为 head 的直接子元素，并紧随 charset 声明之后 页面标题 【资源引入】   1、保证 favicon 可访问   2、引入 CSS 和 JavaScript 时无须指明 type 属性   3、引入 CSS 时必须指明 rel=\"stylesheet\"   4、使用link将css文件引入，并置于head中；使用script将js文件引入，并置于body底部   5、移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 URL 协议部分与页面相同，建议省略协议前缀。这是因为使用 protocol-relative URL 引入 CSS，在 IE7/8 下，会发两次请求。是否使用 protocol-relative URL 应充分考虑页面针对的环境 【结构优化】   1、尽量遵循 HTML 标准和语义，但是不要以牺牲实用性为代价。任何时候都要尽量使用最少的标签并保持最小的复杂度   2、结构顺序和视觉顺序基本保持一致，按照从上至下、从左到右的视觉顺序书写HTML结构。有时为了便于搜索引擎抓取，也会将重要内容在HTML结构顺序上提前   3、结构、表现、行为三者分离，避免内联   4、每一个块级元素都另起一行，每一行都使用Tab缩进对齐（head和body的子元素不需要缩进）。删除冗余的行尾空格   5、对于内容较为简单的表格，建议将tr写成单行   6、可以在大的模块之间用空行隔开，使模块更清晰 【语义化】   浏览器会根据标签的语义给定一个默认的样式。判断网页标签语义化是否良好的一个简单方法：去掉样式，看网页结构是否组织良好有序，是否仍然有很好的可读性   1、尽可能少地使用无语义标签span和div   2、在语义不明显，既可以使用p也可以使用div的地方，尽量用p   3、在既可以使用div也可以使用section的地方，尽量用section   4、不要使用纯样式标签，如b、u等，而改用CSS设置   代码格式 【缩进】   使用2个空格代替1个Tab（大多数编辑器中可设置） first second 【命名】   1、class 必须单词全字母小写，单词间以 - 分隔   2、class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名   3、同一页面，应避免使用相同的 name 与 id。因为IE7-浏览器会混淆元素的 id 和 name 属性， document.getElementById 可能获得不期望的元素。所以在对元素的 id 与 name 属性的命名需要非常小心 【标签】   1、标签名必须使用小写字母   2、对于无需自闭合的标签，不需要自闭合   3、对 HTML5 中规定允许省略的闭合标签，不允许省略闭合标签   4、HTML 标签的使用应该遵循标签的语义，且要符合标签嵌套规则 Hello StyleGuide! Hello StyleGuide! first second first second 【注释】   采用类似标签闭合的写法，与HTML统一格式；注释文案两头空格，与CSS注释统一格式   开始注释：（文案两头空格）   结束注释：（文案前加“/”符号，类似标签的闭合）   允许只有开始注释 LOGO NAV1 NAV2 【属性】   1、属性和值全部小写   2、属性值必须用双引号包围   3、布尔类型的属性，建议不添加属性值   4、自定义属性建议以 xxx- 为前缀，推荐使用 data-   5、可以省略style标签和script标签的type属性 ... ... 【属性顺序】   HTML 属性应该按照特定的顺序出现以保证易读性 id class name data-xxx src, for, type, href title, alt aria-xxx, role   特殊元素 【图片】   1、禁止 img 的 src 取值为空，否则会导致部分浏览器重新加载一次当前页面   2、为图片添加 alt 属性，提高图片加载失败时的用户体验   3、避免为 img 添加不必要的 title 属性，多余的 title 影响看图体验，并且增加了页面尺寸   4、为图片添加 width 和 height 属性，以避免页面抖动   5、有下载需求的图片采用 img 标签实现，无下载需求的图片采用 CSS 背景图实现   产品 logo、用户头像、用户产生的图片等有潜在下载需求的图片，以 img 形式实现，能方便用户下载   无下载需求的图片，比如：icon、背景、代码使用的图片等，尽可能采用 css 背景图实现 【表单】   1、有文本标题的控件使用 label 标签将其与其标题相关联。最好将控件置于 label 内，以减少不必要的 id 我已确认上述条款   2、使用 button 元素时必须指明 type 属性值。因为button 元素的默认 type 为 submit，如果被置于 form 元素中，点击后将导致表单提交 提交 取消   3、在针对移动设备开发的页面时，根据内容类型指定输入框的 type 属性，能获得友好的输入体验 【多媒体】   1、在支持 HTML5 的浏览器中优先使用 audio 和 video 标签来定义音视频元素，并使用退化到插件的方式来对多浏览器进行支持   2、只在必要的时候开启音视频的自动播放 "},"HTML/structure/structure_doctype.html":{"url":"HTML/structure/structure_doctype.html","title":"文档声明","keywords":"","body":"HTML文档声明   HTML文档通常以类型声明开始，该声明将帮助浏览器确定其尝试解析和显示的HTML文档类型。本文将详细介绍文档声明DOCTYPE   特点   文档声明必须是HTML文档的第一行、且顶格显示，对大小写不敏感。因为任何放在DOCTYPE前面的东西，比如批注或XML声明，会令IE9或更早期的浏览器触发怪异模式(后面的渲染模式会介绍)   由于文档类型声明不是标签，因此不应具有关闭标签   版本 版本年份 HTML 1991 HTML+ 1993 HTML 2.0 1995 HTML 3.2 1996 HTML 4.01 1999 XHTML 1.0 2000 HTML5 2014   声明 HTML5   在HTML5之前，文档声明一般有三种类型：严格型strict、过渡型transitional、框架frameset   严格型DTD包含所有HTML元素和属性，但不包含展示性的和弃用的元素(如font)；而过渡型或宽松型(loose)则包含展示性和启用的元素 HTML4.01 　 XHTML1.0 XHTML1.1 等同于XHTML1.0 Strict 【DTD】   DTD称为文档类型定义，它可以定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。在HTML中，DTD使用XML定义了HTML标签规范   由于HTML5不基于SGML，所以不需要引用DTD。但是需要doctype来启用标准模式(后面的渲染模式会介绍)。HTML5的语法元素来自SGML、HTML、XHTML1.X，使它成为一种有自己规则的合成语言   HTML、XML和SGML这三者的关系并不容易区分。HTML是SGML的一个实例，它的DTD作为标准被固定下来，因此，HTML不能作为定义其它置标语言的元语言。XML是SGML的一个子集，严格地讲，XML也还是SGML。与HTML不同的是，XML有DTD，因而也可以像SGML那样作为元语言，来定义其它文件系统或置标语言。如果把置标语言分为元置标语言和实例置标语言的话，SGML和XML都是元置标语言，而HTML和由XML派生的XHTML都是实例置标语言   注意：关于DTD的更多信息移步至此   渲染模式   在很久以前的网络上，页面通常有两种版本：为网景(Netscape)的Navigator准备的版本以及为微软(Microsoft)的Internet Explorer准备的版本。当W3C创立网络标准后，为了不破坏当时既有的网站，浏览器不能直接起用这些标准。因此，浏览器采用了两种模式，用以把能符合新规范的网站和老旧网站区分开。   浏览器排版引擎有三种模式：怪异模式(Quirks mode)、接近标准模式(Almost standards mode)以及标准模式(Standards mode)。在怪异模式下，排版会模拟Navigator4与Internet Explorer 5的非标准行为。为了支持在网络标准被广泛采用前，就已经建好的网站，这么做是必要的。在标准模式下，行为即由HTML与CSS的规范描述的行为。在接近标准模式下，只有少数的怪异行为被实现   对HTML文档来说，浏览器使用文档开头的DOCTYPE来决定用怪异模式处理或标准模式处理。如果文档中没有DOCTYPE将触发文档的怪异模式。怪异模式最明显的影响是会触发怪异盒模型。在CSS中盒模型被分为两种，第一种是W3C的标准模型，第二种是怪异盒模型。不同之处在于怪异盒模型的宽高定义的是可见元素框的尺寸，而不是元素框的内容区尺寸 "},"HTML/structure/structure_docHead.html":{"url":"HTML/structure/structure_docHead.html","title":"文档头部","keywords":"","body":"HTML文档头部   在声明文档类型之后，HTML文档的下一部分为标签，告知浏览器应将括在...内的所有内容解析为HTML。然后是HTML文档的两个主要部分：和。将包含有关页面的常规信息和元数据，本文将详细介绍HTML的文档头部   概述   大部分不可见，描述了文档的一些基本的属性和信息(可以呈现的是title和icon)。元素下的子元素主要包括、、、、和这六个元素   meta   标签(meta-information)用于提供页面有关的元数据，除了提供文档字符集、使用语言、作者等基本信息外，还涉及对关键词和网页等级的设定。通过设置不同的属性，元数据可以分为以下几种:   如果设置了charset，即将对网页使用的字符集作出声明HTML5   如果设置了name，它是一个文档级的元数据，将附着在整个页面上   如果设置了http-equiv，它是一个编译指令，即由服务器提供的来指示页面应如何加载   如果设置了itemprop，将定义一个用户自定义的元数据(未实现) 1、charset   charset声明声明当前文档所使用的字符编码，但该声明可以被任何一个元素的lang特性的值覆盖。文档的编码一定要与文件本身的编码保持一致，否则会出现乱码，推荐使用UTF-8编码   注意：字符编码必须写在元素的最开始，如果位于标签之后，那么标签很可能会乱码 2、name 【关键词】 【描述】 【作者】 【版权】 【视口(移动端使用)】　 【IE浏览器渲染】   如果安装了GCF(Google Chrome Frame谷歌内嵌浏览器框架GCF)，则使用GCF来渲染页面，如果没有安装，则使用最高版本的IE内核进行渲染 【双核浏览器渲染】   如果是双核浏览器，则使用webkit内核渲染 3、http-equiv 【定时跳转】   让网页多少秒刷新，或跳转到其他网页 【缓存过期时间】   可以用于设定网页的到期时间，一旦过期则必须到服务器上重新调用。需要注意的是必须使用GMT时间格式 【禁止缓存】   用于设定禁止浏览器从本地机的缓存中调阅页面内容，用户无法脱机浏览 【独立页面】   强制页面在当前窗口中以独立页面显示，可以防止自己的网页被别人当作一个frame页调用 【兼容模式】   Edge模式告诉IE以最高级模式渲染文档，也就是说，什么版本IE就用什么版本的标准模式渲染；chrome模式表示强制IE使用Chrome Frame渲染。Google官方提供了对Google Frame插件安装情况的检测，这里直接调用方法即可，如果检测到IE并未安装Google Frame，则弹出对话框提示安装。使用此插件，用户可以通过IE的用户界面，以Chrome内核的渲染方式浏览网页   下面表示如果当前浏览器版本是小于等于IE8的，则使用chrome，如果不是，则使用IE标准模式   注意：关于元素的更多信息移步至此   title   元素定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包含的任何标签都不会被解释   元素详细来说，有以下三个作用：1、定义浏览器工具栏中的标题；2、提供页面被添加到收藏夹时显示的标题；3、显示在搜索引擎结果中的页面标题   注意：在所有HTML文档中，都是必须的 About Me   base   用于指定文档里所有相对URL地址的基础URL，为页面上所有链接规定默认地址和默认打开方式。文档中的基础URL可以使用document.baseURI进行查询   注意：一份文档最多一个元素。如果指定了多个>`元素，只会使用第一个href和target值，其余都会被忽略   link   指定了外部资源与当前文档的关系，具有属性href、rel、media、hreflang、type和sizes。其中href和rel是常用的，href指定了链接的资源的地址(url)，而rel指定了资源的类型 【rel属性】 alternate 指示链接到该文档的另一个版本 author 指示链接到当前文档的作者主页 help 指向一个跟网站或页面相关的帮助文档 icon 引入代表当前文档的图标，新的sized属性与这个属性结合使用，指定链接图片的宽高 license 链接到当前的文档的版权声明 next 指示链接到文档是一组文档中的下一份 pingback 处理当前文档被引用情况的服务器地址 prefetch 指明需要缓存的目标资源 prev 标明了上一个文档 search 链接到可以用于搜索当前页面和相关页面的资源 sidebar 链接到可以作为附属上下文的文档 stylesheet 引入样式表 tag 创建应用于当前文档的标签 【media属性】 screen 计算机屏幕 tty 终端 tv 电视 projection 投影仪 handheld 手持设备 print 打印的页面 braille 盲文设备 aural 语音合成器 all 所有 【sizes属性】   sizes属性规定被链接资源的尺寸，且只有当被链接资源是图标时，才可使用该属性 【引入图标】 【引入外部样式表】   注意：关于元素的更多信息移步至此   style   元素包含了文档的样式化信息或者文档的一部分，常用于引入内部CSS样式 body{background-color: red;}   主要包含以下属性 【type】   该属性以MIME类型(不应该指定字符集)定义样式语言。如果该属性未指定，则默认为‘text/css' 【media】   指定哪个媒体应该应用该样式 【title】   指定可选的样式表 【disabled】   如果指定该属性，关闭(不应用)样式规则到文档中的元素。 【scoped】   使用scoped属性，可以在页面任意位置添加CSS样式。但是这样就违背了结构与样式分离的原则，要小心使用。如果该属性存在，则样式应用于其父元素；如果不存在，则应用于整个文档。该属性只有chrome和firefox支持 The scoped attribute This text should be black p { color: red; } This should be red.   script   的作用是在HTML或XHTML文档中嵌入或引用可执行的脚本。没有async或defer属性的脚本和内联脚本会在浏览器继续解析剩余文档前被获取并立刻执行 【src】   这个属性定义引用外部脚本的URI，这可以用来代替直接在文档中嵌入脚本。有src属性的script元素标签内不应该再有嵌入的脚本 【type】   该属性定义script元素包含或src引用的脚本语言。属性的值为MIME类型，支持的MIME类型包括text/javascript, text/ecmascript, application/javascript和application/ecmascript。如果没有定义这个属性，脚本会被视作JavaScript。如果MIME类型不是JavaScript类型(上述支持的类型)，则该元素所包含的内容会被当作数据块而不会被浏览器执行   如果type属性为module，代码会被当作JavaScript模块 【defer】   这个布尔属性定义该脚本是否会延迟到文档解析完毕后才执行 【async】   async属性是HTML5新增的属性，IE9-浏览器不支持。该布尔属性指示浏览器是否在允许的情况下异步执行该脚本。该属性对于内联脚本无作用(即没有src属性的脚本） javascript加载   正常情况下，当浏览器在解析HTML源文件时如果遇到外部的script，那么解析过程会暂停，并发送请求来下载script文件，只有script完全下载并执行后才会继续执行DOM解析   在下载过程中浏览器是被阻止做其他有用的工作的，包括解析HTML，执行其他脚本，以及展示CSS布局。虽然Webkit预加载扫描程序可以探测性地在下载阶段进行多线程下载，但是某些页面仍然存在很大的网络延迟   当前有很多技术来提升页面显示速度，但都需要额外的代码以及针对特定浏览器的技巧。现在，script可以通过添加async或者defer属性来让脚本不必同步执行   async和defer标注的script都不会暂停HTML解析就立刻被下载，两者都支持onload事件回调来解决需要该脚本来执行的初始化   两者的区别在于执行时的不同：async脚本在script文件下载完成后会立即执行，并且其执行时间一定在window的load事件触发之前。这意味着多个async脚本很可能不会按其在页面中的出现次序顺序执行；与此相对，浏览器确保多个defer脚本按其在HTML页面中的出现顺序依次执行，且执行时机为DOM解析完成后，document的DOMContentLoaded事件触发之前   注意：如果同时设置async和defer，和只设置async属性的效果一致   下面展示的是一个需要1秒来下载，以及1秒来解析执行其他操作的例子，整个页面载入花了大约2秒钟   同样的例子，但这次我们指定了script的defer属性.因为当defer脚本下载的时候，其他操作可以并行执行，所以大概快了1倍 "},"HTML/structure/structure_docStruc.html":{"url":"HTML/structure/structure_docStruc.html","title":"骨架结构","keywords":"","body":"HTML骨架结构   一个完整的HTML文档必须包含3个部分：文档声明、文档头部和文档主体。而正是它们构成了HTML的骨架结构。前面已经分别介绍过文档声明和文档头部，本文将详细介绍构成HTML骨架结构的基础元素   HTML   元素代表HTML文档的根(root)，其他所有元素都是该元素的后代。与标签限定了文档的开始点和结束点，在它们之间是文档的头部和主体。文档的头部由标签定义，而主体由标签定义 【xmlns】   xmlns属性用于指派文档的XML命名空间。预设值是\"http://www.w3.org/1999/xhtml\"，这在XHTML中是必要的，而在HTML中则是可选的   HEAD   标签用于定义文档的头部，它是所有头部元素的容器。大部分不可见，描述了文档的一些基本的属性和信息(可以呈现的是title和icon)。元素下的子元素主要包括、、、、和这六个元素   定义文档的标题，它是head部分中唯一必需的元素   如果在文档中忽略了标签，则大部分浏览器会自动创建一个元素   关于文档头部的更多信息移步至此   BODY   表示的是HTML文档的主体内容，任何一个HTML文档，只允许存在一个元素 【默认样式】 chrome/firefox/safari/IE8+ margin:8px; IE7- margin:15px 10px;   结构   在sublime编辑器中，输入!，再按住Tab键，就可以生成一个基本的HTML结构，结构如下 Document   在实际中，文档的头部结构常常需要承载一些常用的功能，所以HTML结构较复杂，结构如下 Document "},"HTML/structure/structure_eleBlock.html":{"url":"HTML/structure/structure_eleBlock.html","title":"块级元素","keywords":"","body":"HTML块级元素   在HTML5出现之前，人们一般把元素分为块级、内联和内联块元素。本文将详细介绍HTML块级元素   h   标题(Heading)元素有六个不同的级别，是最高级的，而则是最低的。一个标题元素能简要描述该节的主题   从到，重要性逐渐减小，字体大小也逐渐减小。在使用标题元素时，要注意以下几点   1、不要为了减小标题的字体而使用低级别的标题，而是使用CSS的font-size样式   2、避免跳过某级标题：始终要从开始，接下来使用 等等   3、使用 元素时，为了方便起见，避免重复在一个页面上使用，应该用来表示页面的标题，其他的标题当从开始。使用时，应当每个 section都使用一个 【默认样式】 //从h1到h6 margin: 0.67em 0 -> 0.83em 0 -> 1em 0 -> 1.33em 0 -> 1.67em 0 -> 2.33em 0; font-size: 2em -> 1.5em -> 1.17em -> 1em -> 0.83em -> 0.67em; font-weight: bold;   HTML5新增了标签，它表示标题组，用于组合标题，只在区块需要有多个级别的标题时使用　 水果 苹果   p   元素(paragraph)表示文本的一个段落，该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进 【默认样式】 margin: 16px 0; 段落1 段落2 段落3   div   元素(divide)(或HTML文档分区元素)是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求(使用class或id特性)或者对具有相同特性的一组元素进行分组(比如lang)，它应该在没有任何其它语义元素可用时才使用(比如或)   hr   元素表示段落级元素之间的主题转换(例如，一个故事中的场景的改变，或一个章节的主题的改变)。在HTML的早期版本中，它是一个水平线。现在它仍能在可视化浏览器中表现为水平线，但目前被定义为语义上的，而不是表现层面上   用于段落级元素之间的分割，区块之间不需要使用进行分割 段落1 段落2 【默认样式】 margin: 8px 0; border-style: inset; border-width: 1px;   pre   元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符(比如空格和换行符)都会显示出来，通常表示已排版的内容，如代码块和字符画等 body { color:red; } 【默认样式】 margin: 1em 0; white-space: pre;   blockquote   元素(或者HTML块级引用元素)，代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进。若引文来源于网络，则可以将原内容的出处URL地址设置到cite特性上，若要以文本的形式告知读者引文的出处时，可以通过元素   [注意]引用的署名必须在引用外部定义 　　横眉冷对千夫指,俯首甘为孺子牛 鲁迅 【默认样式】 margin: 1em 40px;   address   元素可以让作者为它最近的或者祖先元素提供联系信息。在后一种情况下，它应用于整个文档   当表示一个和联系信息无关的任意的地址时，使用元素而不是元素。这个元素不能包含除了联系信息之外的任何信息，比如出版日期(这应该包含在元素中)。通常，元素可以放在当前section的元素中，如果存在的话 【默认样式】 font-style: italic;   其他   除了上面介绍的、、、、、标签外，还有一些前面已经介绍过的标签属于块级标签   包括骨架类标签(、)，列表类标签(、、、、)，表单类标签(form、、、、、)，HTML5新增的结构标签(、、、、、)，HTML5新增的多媒体标签(、)，HTML5新增的功能性标签(、)   最后   可能有人会觉得标签应该是一个块级元素，因为它有换行，与块级元素的特征很相似。但它实际上是一个内联元素，它的用途是在文本中产生一个换行 "},"HTML/structure/structure_eleInline.html":{"url":"HTML/structure/structure_eleInline.html","title":"内联元素","keywords":"","body":"HTML内联元素   用于标记段落里的文本和其他内容组的元素种类很多，本文将这些文本级元素进行简单分类，便于整理和记忆   通用容器   元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图(通过使用类或者Id属性)，或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。与元素很相似，但是一个块元素而则是行内元素 Some text   强调重要   虽然浏览器通常用斜体和粗体来显示em和strong，但这些元素不应用作加粗和斜体。这两个元素分别用来提升包含内容的强调程度和重要性   表示强调，元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读   表示重要 I am very worried! warning   文字间隔   i和b元素历来是用来展示粗体和斜体字体的，但在HTML5中，它们有了新的语义   1、表示不同情绪或声音的文本，如内心对白 Simon smirked,\"Yes,I'm happy to take the garbage out.\" Ugh,I really don't want to ! he thought as he picked up the garbage bag.   2、表示外来语、分类学名和技术术语等 Oh la la!     1、用于分隔文字 After bringing water to a boil, add potatoes and carrots   2、用于文章或故事的引言 Meteorologists predict more sunshine and scorching temperatures for the upcoming week, prompting area farmers to install irrigation systems.   不精确文字   在HTML5中重新定义为有错的、过时的、不被建议使用的文本，常用于表示价格变动等 价格￥1298￥998！ 37度 41度   高亮显示   表示高亮或用于引用而标记的文字 We're all hoping it rains soon, some farmers have installed irrigation systems, at considerable expense   次要评论   表示旁注，可用于免责声明、使用条款和版权信息等需要小字体的场景 图片仅供参考，请以实物为准 Chris Elhorn | The city Press   术语处理   用来定义术语 The term organic food refers to food produced without synthetic chemicals     缩写词，可以配合定义术语 The GDO id a device allows off-world teams to open the iris.   引用   表示作品标题的引用，可以是书影音画等 我最喜欢的电影是千与千寻     表示短引用，常用于引用别人说的话，用引号可以表达等价语义 The judge said You can drink water form the fish tank but advised against it.   换行   换行   注意：标签是文本级语义元素，可以设置行高和字体大小，但设置宽高无效 The City Press 123 General Street Springfield, OH 45501   需要时指定单词可以换行的位置 Irrigation Direct   上标下标   这两个标签在数学等式、科学符号和化学公式中非常有用   表示上标 a2 + b2 = c2     表示下标 H2 SO4   文本删改   如果要表示文档的增删改记录，则应该使用ins和del标签   文档中插入的内容   文档中删除的内容   注意：和可以嵌套任何元素 【属性】   1、datetime:用于标明编辑的日期和可选的时间   2、cite:用于指定说明编辑的文档网址 一打有 二十 十二 件。   特定时间   表示日期或时间 【属性】   1、datatime表示确切的时间，遵循格式YYYY-MM-DDThh:mm:ssTZD，表示年-月-天-分割符T-时-分-秒-时区   2、pubdate表示元素中的日期或时间是文档的发布日期 我们在每天早上 9:00 开始营业。 我在情人节有个约会。 Posted   注音标识   ruby标签定义注音标识，多用于CJK文字，CJK是指中日韩统一表意文字(Chinese、Japanese、Korean)   表示ruby标记   表示ruby标记文字   表示ruby标记括号 漢 ㄏㄢˋ 汉 ( hàn ) 语 ( yǔ )   文字方向   忽略周围文字方向的文字   覆盖两种方向的设置，允许显式设置方向，并覆盖所有其他当前方向 When rendered by a browser, these words will appear as 'sdroweseht'   代码   表示计算机代码   定义键盘码   定义计算机例子代码   定义打字机代码   定义变量 Computer code Keyboard input Teletype text Sample text Computer variable   例子演示   【演示框】点击下列相应标签名可进行演示 "},"HTML/structure/structure_eleStruc.html":{"url":"HTML/structure/structure_eleStruc.html","title":"结构元素","keywords":"","body":"HTML5结构元素   几年前，用于网页布局一般都用div元素，但语义化并不好。HTML5引入了大量新的块级元素来帮助提升网页的语义，使页面具有逻辑性结构、容易维护，并且对数据挖掘服务更友好。本文将详细介绍HTML5结构元素   概述   结构元素，又称为区块型元素，是用来定义区块内容范围的元素。之前，区块型元素只有一个，HTML5新增了7个语义化结构元素，包括、、、、、、   section   Section元素()表示文档中的一个区域(或节)，是区块级通用元素。比如，内容中的一个专题组，一般来说会有包含一个标题(heading)。一般通过是否包含一个标题(- element)作为子节点，来辨识每一个   注意：如果元素内容可以分为几个部分的话，应该使用而不是；再有，不要把元素作为一个普通的容器来使用，这是本应该是的用法。 一般来说，一个应该出现在文档大纲中   article   元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构。可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。当元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的元素可嵌套在代表博客文章的元素中   元素的作者信息可通过元素提供，但是不适用于嵌套的元素；元素的发布日期和时间可通过元素的pubdate属性表示   注意：对于和来说，是必须要加上标题的   aside   元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。一般用于表示不直接相关内容的侧边栏，里面的内容与它所关联的内容相互独立，谁缺了谁都不影响各自文本含义的理解。如一篇文章的广告、相关背景和引述内容等   nav   HTML导航栏()描绘一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表   并不是所有的链接都必须使用元素，它只用来将一些热门的链接放入导航栏，例如元素就常用来在页面底部包含一个不常用到，没必要加入的链接列表   一个网页也可能含有多个元素，例如一个是网站内的导航列表，另一个是本页面内的导航列表   header   元素表示页面头部或区块头部，用于将介绍内容和区块的辅助导航分组到一起，所以它有可能包含区块的标题元素以及其他的介绍内容(目录、logo等)    注意：由于和元素不是分节内容，所以不会引入新的分节到大纲中   footer   元素表示最近一个章节内容或者根节点(sectioning root)元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息   注意：元素内的作者信息应包含在元素中   main   元素放在最后说，是因为不常用，最主要的原因是IE浏览器都不支持   main元素()呈现了文档或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。这部分内容在文档中应当是独一无二的，不包含任何在一系列文档中重复的内容   标签不能是以下元素的继承，包括、、、、或。 在一个文档中不能出现一个以上的 标签   所以，一个正常的最外层布局应该是下面这样   但现在，一般地，布局如下    案例说明   想找一个规范使用html5新标签的网站不是很容易，国内大多数网站由于各种各样的原因，依然还是div布局，最终，案例选择使用苹果官网 苹果首页 Apple Mac iPad iPhone Watch Music 技术支持 搜索 购物袋 展示1 展示2 展示3 展示4 按钮1 按钮2 按钮3 按钮4 Watch Pencil iPad MacBook 选购及了解 商店 应用 账户 关于 其他杂项 "},"HTML/structure/structure_eleMutual.html":{"url":"HTML/structure/structure_eleMutual.html","title":"交互元素","keywords":"","body":"不常用的3个HTML交互元素：details、summary、dialog   HTML5不仅新增了语义型区块级元素及表单类元素，也新增了一些其他的功能性元素，这些元素由于浏览器支持等各种原因，并没有被广泛使用   文档描述   主要用于描述文档或文档某个部分的细节，与配合使用可以为定义标题。标题是可见的，用户点击标题时，显示出details   注意：这两个标签只有chrome和opera支持     该标签仅有一个open属性，用来定义details是否可见(默认为不可见状态) Copyright 2015. 小火柴的蓝色理想   对话框   标签用来定义对话框或窗口，且该对话框位于窗口的水平居中位置     该标签只有一个open属性，用来定义对话框是否可见(默认为不可见)   注意：只有chrome和opera支持 显示对话框 我是对话框的内容 var oBtn = document.getElementsByTagName('button')[0]; var oDia = document.getElementsByTagName('dialog')[0]; oBtn.onclick = function(){ console.log(oDia.getAttribute('open')) if(!oDia.getAttribute('open')){ oDia.setAttribute('open','open'); this.innerHTML ='隐藏文本框'; }else{ oDia.removeAttribute('open'); this.innerHTML = '显示文本框'; } } "},"HTML/structure/structure_contModel.html":{"url":"HTML/structure/structure_contModel.html","title":"内容模型","keywords":"","body":"HTML标签内容模型   HTML核心的部分莫过于标签(tag)了。标签是用来描述文档中的各自内容基本单元，不同标签表示着不同的含义，标签之间的嵌套表示了内容之间的结构。   HTML标签在HTML5中内容模型拓展到了7类，包括元数据型、区块型、标题型、文档流型、语句型、内嵌型、交互型。但即使是这7个类别也没有完全覆盖所有元素的所有情况，元素可以不属于任何一个类别，被称为穿透的；很多元素可能属于不止一个类别，称为混合的   HTML标签详细信息见此w3c链接 分类 元数据型(metadata)   设置展示、行为、关联文档或其他内容的元数据的元素   元素包含文档的元素数据，包括、、、、、、和共8个   详细信息移步到此   区块型(sectioning)   定义区块内容范围的元素，包括、、、四个元素   详细信息移步到此   标题型(heading)   定义区块内容标题的元素，包括到以及   详细信息移步到此   文档流型(flow)   大部分文档内的元素，只有部分元数据式元素不属于流式，它们是和   详细信息移步至此   语句型(phrasing)   文档里的文字、在段落中标记文字的元素等   详细信息移步至此   内嵌型(embedded)   由于HTML本身提供的元素的表达能力有限，允许嵌入内容成为浏览器开发者不得不做的事情，在文档引入另一个资源的元素或者插入文档的另一种语言。嵌入式内容包括、、、、、、、和九类   注意：该类元素中，、、这三个元素不设置宽高时，默认宽高为300px*150px   ( -> image 图像)   关于图像标签的详细信息移步至此      关于框架标签的详细信息移步至此      关于的详细信息移步至此   音频和视频   关于音频和视频类标签的详细信息移步至此   交互型(interactive)   专门用于用户交互的元素，包括、、、、、、、、、、、、、、   其中，、、、这四个交互元素浏览器的支持性还不太好   关于和的详细信息移步至此 "},"HTML/tags/media/media.html":{"url":"HTML/tags/media/media.html","title":"音频和视频","keywords":"","body":"HTML音频和视频   多媒体元素(比如视频和音频)存储于媒体文件中，确定媒体类型的最常用的方法是查看文件扩展名。如.swf、.wmv、.mp3、.mp4   媒体格式 音频格式 .mid/.midi   MIDI (Musical Instrument Digital Interface) 是一种针对电子音乐设备（比如合成器和声卡）的格式。MIDI 文件不含有声音，但包含可被电子产品（比如声卡）播放的数字音乐指令。因为 MIDI 格式仅包含指令，所以 MIDI 文件极其小巧。大多数流行的网络浏览器都支持 MIDI .rm/.ram   RealAudio 格式是由 Real Media 针对因特网开发的。该格式也支持视频。该格式允许低带宽条件下的音频流（在线音乐、网络音乐）。由于是低带宽优先的，质量常会降低 .wav   Wave (waveform) 格式是由 IBM 和微软开发的。所有运行 Windows 的计算机和所有网络浏览器（除了 Google Chrome）都支持它 .wma   WMA 格式 (Windows Media Audio)，质量优于 MP3，兼容大多数播放器，除了 iPod。WMA 文件可作为连续的数据流来传输，这使它对于网络电台或在线音乐很实用 .mp3/.mpga   MP3 文件实际上是 MPEG 文件的声音部分。MPEG 格式最初是由运动图像专家组开发的。MP3 是其中最受欢迎的针对音乐的声音格式   视频格式 .avi   AVI (Audio Video Interleave) 格式是由微软开发的。所有运行Windows的计算机都支持AVI格式 .wmv   Windows Media 格式是由微软开发的。Windows Media 在因特网上很常见，但是如果未安装额外组件，就无法播放 Windows Media 电影 .mpg/.mpeg   MPEG (Moving Pictures Expert Group) 格式是因特网上最流行的格式。它是跨平台的，得到了所有最流行的浏览器的支持 .mov   QuickTime 格式是由苹果公司开发的。QuickTime 是因特网上常见的格式，但是QuickTime 电影不能在没有安装额组件的Windows计算机上播放 .rm/.ram   RealVideo 格式是由 Real Media 针对因特网开发的。该格式允许低带宽条件下（在线视频、网络电视）的视频流。由于是低带宽优先的，质量常会降低 .swf/.flv   Flash (Shockwave) 格式是由 Macromedia 开发的。Shockwave 格式需要额外的组件来播放 .mp4   Mpeg-4 (with H.264 video compression) 是一种针对因特网的新格式。越来越多的视频发布者将其作为 Flash 播放器和 HTML5 的因特网共享格式   元素 插件元素   用来定义嵌入内容，比如flash插件   注意：由于移动端设备对flash等浏览器插件支持比较差，IOS设备完全不支持，因此不建议使用flash。如果需要播放音频视频，可以使用video和audio来调用浏览器原生的播放器 【属性】 height 设置嵌入内容的高度 width 设置嵌入内容的宽度 src 设置嵌入内容的URL type 设置嵌入内容的类型     定义一个嵌入的对象      object可以嵌套object或其他元素，如果浏览器不能渲染优先的选择就显示后备的内容 【属性】 height 设置嵌入对象的高度 width 设置嵌入对象的宽度 type 设置嵌入对象的类型 name 设置对象的名称，以便在脚本中使用 data 设置对象的URL usemap 设置与对象一同使用的客户端图像映射的URL form 规定对象所属的一个或多个表单(将object作为表单的一部分是为了解决让插件发送数据到服务器的需要) typemustmatch 检测资源类型和type属性是否相符(data和type同时设置的情况下)     用来给内嵌的插件传递参数 【属性】 name 定义参数的名称 value 规定参数的值 type 规定参数的MIME类型 valuetype 规定值的MIME类型(data/ref/object) 　　   HTML5元素   HTML5新增了两个与媒体相关的标签，让开发人员不必依赖任何插件就能在网页中嵌入跨浏览器的音频和视频内容，这两个标签是和，且不被IE8-浏览器支持   这两个标签支持的类型为：    视频 [1]video/ogg [2]video/mp4 [3]video/webm    音频 [1]audio/ogg [2]audio/mpeg   关于和标签的详细信息移步至此   HTML音频   在HTML中播放音频的方法有很多种 【1】 【2】 【3】 【4】 Play the sound 【5】更好的解决办法   HTML视频   在HTML中播放视频的方法也有好多种 【1】 【2】 【3】 【4】 Play the video 【5】更好的解决办法 "},"HTML/tags/media/tags_audioAndVideo.html":{"url":"HTML/tags/media/tags_audioAndVideo.html","title":"audio 和 video","keywords":"","body":"audio和video   HTML5新增了两个与媒体相关的标签，让开发人员不必依赖任何插件就能在网页中嵌入跨浏览器的音频和视频内容，这两个标签是和，且不被IE8-浏览器支持   以视频文件举例，它包含了音频轨道、视频轨道和其他一些元数据(封面、标题、子标题、字幕等) HTML元素   使用这两个元素至少要在标签中包含src属性。位于开始和结束标签之间的任何内容都将作为后备内容，在浏览器不支持这两个媒体元素的情况下显示 autoplay 自动播放 controls 显示控件 loop 循环播放 preload 音频在页面加载时进行加载，并预备播放(若使用autoplay,则忽略该属性) src 要播放的音频的URL   注意：元素不支持播放wma格式的文件   点击下列相应属性值可进行演示   autoplay 自动播放 controls 显示控件 height 　　　播放器高度 width 　　　 播放器宽度 loop 循环播放 preload 视频在页面加载时进行加载，并预备播放(若使用autoplay,则忽略该属性) preload=\"none\" //当页面加载后不载入视频 preload=\"auto\" //当页面加载后载入整个视频 preload=\"meta\" //当页面加载后只载入元数据 src 要播放的视频的URL poster 　　　 规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像   点击下列相应属性值可进行演示     为和提供媒介资源 media 规定媒体资源的类型(没有浏览器支持) src 　规定媒体文件的URL type 规定媒体资源的MIME类型   常用类型    视频 [1]video/ogg [2]video/mp4 [3]video/webm    音频 [1]audio/ogg [2]audio/mpeg   使用和至少要在标签中包含src属性。位于开始和结束标签之间的任何内容都将作为后备内容，在浏览器不支持这两个媒体元素的情况下显示 video player not available. audio player not available.   因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源。为此，不用在标签中指定src属性，而是使用一个或多个元素 video player not available. audio player not available.   因为并非所有浏览器都支持和标签，所以更好的解决办法是有备选内容     元素被当作媒体元素—和的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕   track 给媒体元素添加的数据的类型在kind属性中设置，属性值可以是 subtitles, captions, descriptions, chapters 或 metadata。该元素指向当用户请求额外的数据时浏览器公开的包含定时文本的源文件。一个media元素的任意两个track子元素不能有相同的 kind、srclang和 label属性 【default】   default属性规定该轨道是默认的，假如没有选择任何轨道 【kind】   kind属性表示轨道属于什么文本类型 captions 　　　　该轨道定义将在播放器中显示的简短说明 chapters 　　该轨道定义章节，用于导航媒介资源 descriptions 该轨道定义描述，用于通过音频描述媒介的内容，假如内容不可播放或不可见 metadata 　　该轨道定义脚本使用的内容 subtitles 　该轨道定义字幕，用于在视频中显示字幕 【label】   label属性表示轨道的标签或标题 【url】   URL属性表示字幕文件的URL 【srclang】   srclang属性表示轨道的语言，若 kind 属性值是 \"subtitles\"，则该属性必需的。中文为\"zh\"，英文为\"en\"   字幕文件书写格式如下所示，注意，毫秒位的3个0不能省略 WEBVTT 1 00:00:01.000 --> 00:00:08.000 欢迎来到小火柴的个人网站 API   HTML5 DOM为和元素提供了方法、属性和事件 方法 1、canPlayType()   检测浏览器是否能播放指定的音频或视频类型，返回值为下列之一： 'probable':浏览器最可能支持该类型 'maybe':浏览器也许支持该类型 '':浏览器不支持该类型 //常用值 video/ogg video/mp4 video/webm audio/mpeg audio/ogg audio/mp4 video/ogg;codecs=\"theora,vorbis\" video/mp4;codecs=\"avc1.4D401E,mp4a.40.2\" video/webm;codecs=\"vp8.0,vorbis\" audio/ogg;codecs=\"vorbis\" audio/mp4;codecs=\"mp4a.40.5\" var audio = document.getElementById('audio'); //probably console.log(audio.canPlayType('video/ogg;codecs=\"theora,vorbis\"')); 2、load()   重新加载音频或视频元素，用于在更改src来源或其他设置后对音频或视频元素进行更新 var audio = document.getElementById('audio'); audio.src = 'myocean.mp3'; audio.load(); 3、play()   开始播放音频或视频 4、pause()   暂停当前播放的音频或视频 播放 暂停   点击下列相应属性值可进行演示   属性   注意：所有属性中，只有videoWidth和videoHeight是立即可用的，在音视频的元数据加载后，其他属性才可用 【只读】 1、buffered buffered.length//获取已缓冲范围的数量 buffered.start(index)//获取某个已缓冲范围的开始位置 buffered.end(index)//获取某个已缓冲范围的结束位置 buffered.end(0)//获取当前已缓冲的秒数 获取缓冲时间 var oBtn = document.getElementsByTagName('button')[0]; oBtn.onclick = function(){ alert(audio.buffered.end(0)); } 2、currentSrc   返回当前音频或视频的URL var audio = document.getElementById('audio'); //https://demo.xiaohuochai.site/myocean.mp3 setInterval(function(){ console.log(audio.currentSrc); },1000); 3、ended   返回音频或视频是否已结束 document.onclick = function(){ console.log(audio.ended); } 4、duration   返回当前音频或视频的长度(以秒计)，如果未设置则返回NaN //NaN console.log(audio.duration); //317.022041 setTimeout(function(){ console.log(audio.duration); },1000); 5、networkState   返回音频或视频当前网络状态 networkState:0(尚未初始化) networkState:1(已选取资源，但并未使用网络) networkState:2(正在下载数据) networkState:3(未找到资源来源) //3 console.log(audio.networkState) //1 document.onclick = function(){ console.log(audio.networkState); } 6、paused   返回音频或视频是否已暂停 paused:true;(已暂停) paused:false;(未暂停) console.log(audio.paused) document.onclick = function(){ console.log(audio.paused); } 7、played   已播范围是指音频或视频的时间范围。如果用户在音频或视频中跳跃，会获得多个播放范围 played.length(获得音频或视频已播放范围的数量) played.start(index)(获得某个已播范围的开始位置) played.end(index)(获得某个已播范围的结束位置)   注意：首段已播范围的下标是0 document.onclick = function(){ console.log(audio.played.end(0)); } 8、readyState   返回音频或视频的当前就绪状态 readyState:0(没有关于音频或视频是否就绪的信息) readyState:1(关于音频或视频就绪的元数据) readyState:2(关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧) readyState:3(当前及至少下一帧的数据是可用的) readyState:4(可用数据足以开始播放) //0 console.log(audio.readyState); //4 document.onclick = function(){ console.log(audio.readyState); } 9、seekable   返回可寻址范围，可寻址范围是指用户在视频或音频中可寻址(移动播放位置)的时间范围。对于流视频，通常可以寻址到视频中的任何位置，即使其尚未完成缓冲 seekable.length(获得音频或视频中可寻址范围的数量) seekable.start(index)(获得可寻址范围的开始位置) seekable.end(index)(获得可寻址范围的结束位置) document.onclick = function(){ console.log(audio.seekable.end(0)); } 10、seeking seeking:true(用户正在寻址) seeking:false(用户没有在寻址) audio.onseeking = function(){ console.log(audio.seeking); } 【可读写】 1、autoplay autoplay:false(默认，不自动播放) autoplay:true(自动播放) 2、controls controls:false(默认，不显示控件) controls:true(显示控件) 3、crossOrigin   设置或返回CORS设置 4、currentTime   设置或返回音频或视频的当前位置(以秒计) var audio = document.getElementById('audio'); document.onclick = function(){ console.log(audio.currentTime); audio.currentTime = 5; console.log(audio.currentTime); }; 5、defaultMuted(只有chrome支持) defaultMuted:true(初始静音) defaultMuted:false(默认，初始不静音) audio.defaultMuted = true; 6、muted muted:true(静音) muted:false(不静音) 音量开关 7、defaultPlaybackRate defaultPlaybackRate:1(正常速度) defaultPlaybackRate:0.5(半速) defaultPlaybackRate:2(倍速) defaultPlaybackRate:-1(向后正常速度) defaultPlaybackRate:-0.5(向后半速) var audio = document.getElementById('audio'); setTimeout(function(){ audio.defaultPlaybackRate = 0.5; audio.load(); },1000); 8、playbackRate playbackRate:1(正常速度) playbackRate:0.5(半速) playbackRate:2(倍速) playbackRate:-1(向后正常速度) playbackRate:-0.5(向后半速) var array = [-1,-0.5,0.5,1,2]; var i = 0; var audio = document.getElementById('audio'); document.onclick = function(){ audio.playbackRate = array[i]; console.log(audio.playbackRate); i++; i=i%5; } 9、loop loop:true(循环播放) loop:false(默认，不循环播放) 10、preload   设置或返回是否在页面加载后立即加载音频或视频 preload:auto;(一旦页面加载，则开始加载音频或视频) preload:metadata;(当页面加载后仅加载音频或视频的元数据) preload:none;(页面加载后不加载音频或视频)   注意：当设置autoplay时，该属性无效 11、src   设置或返回音频或视频的当前来源 console.log(audio.src); document.onclick = function(){ console.log(audio.src); audio.src = 'https://demo.xiaohuochai.site/song.mp3'; audio.load(); console.log(audio.src); } 12、volume   设置或返回音频或视频的当前音量 volume(取得为0-1，0为静音，1为最大，默认为1) 增大音量 =0.1)audio.volume-=0.1;\">减小音量   事件   当音频或视频正在加载过程中，会依次发生以下事件： loadstart:提示浏览器开始寻找指定的音频或视频 progress:提示浏览器正在下载指定的音频或视频 durationchange:提示音频或视频的时长已改变 loadedmetadata:提示音频或视频的元数据已加载 loadeddata:提示音频或视频的当前帧已加载，但没有足够数据播放下一帧 canplay:提示浏览器能够开始播放指定的音频或视频 canplaythrough:提示音频或视频能够不停顿地一直播放 progress:提示浏览器正在下载指定的音频或视频 audio.onloadstart = function(){ console.log('loadstart'); } audio.ondurationchange = function(){ console.log('durationchange'); } audio.onloadedmetadata = function(){ console.log('loadedmetadata'); } audio.onloadeddata = function(){ console.log('loadeddata'); } audio.onprogress = function(){ console.log('progress'); } audio.oncanplay = function(){ console.log('canplay'); } audio.oncanplaythrough = function(){ console.log('canplaythrough'); }   影响音频或视频数据加载的事件有以下几个： abort:在音频或视频终止加载时触发 error:在音频或视频加载发生错误时触发 stalled:在浏览器尝试获取媒体数据，但数据不可用时触发 suspend:在音频或视频数据被阻止加载时触发(可以是完成加载后触发，或者因为被暂停) empted:在发生故障并且文件突然不可用时触发 setTimeout(function(){ video.src=''; },2000); video.onabort = function(){ console.log('abort'); } video.onerror = function(){ console.log('error'); } video.onstalled = function(){ console.log('stalled'); } video.onsuspend = function(){ console.log('suspend'); } video.onemptied = function(){ console.log('emptied'); }   音频或视频控制按钮发生改变时触发以下事件: play:音频或视频文件已经就绪可以开始播放时触发 playing:音频或视频已开始播放时触发 ended:音频或视频文件播放完毕后触发 pause:音频或视频文件暂停时触发 ratechange:播放速度改变进触发 seeked:指示定位已结束时触发 seeking:正在进行指示定位时触发 timeupdate:播放位置改变时触发[注意:播放和调整指示定位时都会触发] volumechange:音量改变时触发 waiting:需要缓冲下一帧而停止时触发 var i = 1; document.onclick = function(){ i+=0.1; audio.playbackRate = i; } audio.onended = function(){ console.log('ended'); } audio.onpause = function(){ console.log('pause'); } audio.onplay = function(){ console.log('play'); } audio.onplaying = function(){ console.log('playing'); } audio.onratechange = function(){ console.log('ratechange'); } audio.onseeked = function(){ console.log('seeked'); } audio.onseeking = function(){ console.log('seeking'); } audio.ontimeupdate = function(){ console.log('timeupdate'); } audio.onvolumechange = function(){ console.log('volumechange'); } audio.onwaiting = function(){ console.log('waiting'); }   audio专有   元素在一个原生的javascript构造函数Audio，可以在任何时候播放音频。Audio和Image很像，但Audio不用像Image那样必须插入到文档中，只要创建一个新实例，并传入音频源文件即可 var audio = new Audio('test.mp3'); var audio = new Audio('https://demo.xiaohuochai.site/honey.mp3'); audio.oncanplaythrough = function(){ audio.controls = true; document.body.appendChild(audio); } // 为兼容IOS audio.load()   特别注意的是，IOS不能直接使用oncanplaythrough事件，需要添加audio.load()方法，否则该事件不生效 "},"HTML/tags/media/tags_musicPlayer.html":{"url":"HTML/tags/media/tags_musicPlayer.html","title":"音乐播放器","keywords":"","body":"使用余弦定理制作磁盘形状h5音乐播放器 功能实现   1、歌曲播放进度转换成视觉的旋转角度   2、点击磁盘任意位置歌曲跳转到相应进度   效果展示   原理说明 【1】旋转原理 【2】余弦定理 代码实现 HTML CSS body{ margin: 0; } img{ display: block; border: none; } .outer{ position: relative; width: 122px; height: 122px; margin: 30px auto; overflow: hidden; border-radius: 50%; } .box{ position: absolute; top: 0; left: 0; width: 122px; height: 122px; background: url('img/music.png'); } .box-in{ position: absolute; top: 0; right: 0; width: 50%; height: 100%; overflow: hidden; } .box-in-in{ position: absolute; margin-left: -61px; width: 61px; height: 100%; background: black url('img/music.png'); transform-origin: right; transform:rotate(0deg); } .box-con{ position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%); height: 40px; width: 40px; font: 14px/40px \"iconfont\"; color: black; text-align: center; cursor:pointer; background-color: white; border-radius: 50%; } @font-face {font-family: 'iconfont'; src: url('font/iconfont.eot'); /* IE9*/ src: url('font/iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('font/iconfont.woff') format('woff'), /* chrome、firefox */ url('font/iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url('font/iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */ } JS /* 功能实现 1、播放、暂停 2、调整定位指示 */ var player = document.getElementById('player'); var control = player.getElementsByClassName('box-con')[0]; var rotate = player.getElementsByClassName('box-in-in')[0]; var hidden = player.getElementsByClassName('box-in')[0]; //作为歌曲是否加载完毕的标记 var mark = false; //作为鼠标是否移入控制按钮区域的标记 var enter = false; //记录按钮的上一个值 var lastBtn = '&#xe61d;'; //当歌曲可以开始不停顿地一直播放时，显示播放按钮 audio.oncanplaythrough = function(){ mark = true; control.innerHTML = '&#xe61d;' }; //当歌曲在播放过程中 audio.ontimeupdate = function(){ //播放按钮记录当前进度百分比 if(!enter){ control.innerHTML = Math.floor(audio.currentTime/audio.duration*100) + '%'; }else{ control.innerHTML = lastBtn; } //旋转相应度数 rotate.style.transform = 'rotate('+ audio.currentTime/audio.duration*360 + 'deg)'; if((audio.currentTime/audio.duration)= 61){ result = radial*180/Math.PI; }else{ result = 360-radial*180/Math.PI; } audio.currentTime = audio.duration*result/360; } } //当歌曲播放完毕后 audio.onended = function(){ //重新加载歌曲 audio.load(); //将hidden的样式恢复起始值 hidden.style.cssText = 'overflow:hidden;background:transparent'; rotate.style.transform ='rotate(0);'; //将播放按钮置为'暂停按钮' control.innerHTML = '&#xe61d;'; } //给control添加点击事件 control.onclick = function(e){ var e = e || event; if(e.stopPropagation){ e.stopPropagation(); }else{ e.cancelBubble = true; } if(mark){ if(audio.paused){ audio.play(); this.innerHTML = '&#xe662;'; }else{ audio.pause(); this.innerHTML = '&#xe61d;'; } lastBtn = control.innerHTML; } }; //当鼠标移入control时，标记enter为true control.onmouseover = function(){ if(mark){ enter = true; } } //当鼠标移出control时，标记enter为false control.onmouseout = function(){ if(mark){ enter = false; } } "},"HTML/tags/form/form.html":{"url":"HTML/tags/form/form.html","title":"form 元素","keywords":"","body":"了解HTML表单之form元素   表单是网页与用户的交互工具，由一个元素作为容器构成，封装其他任何数量的表单控件，还有其他任何元素里可用的标签   表单能够包含、、、、、等表单控件元素   注意：表单里嵌套表单是不允许的   form元素   form元素有accept-charset、action、autocomplete、enctype、method、name、novalidate、target共8个属性，其中action和name属性为必需项   表单名称   name属性规定表单名称，如果name=\"test\"，则Javascript可以使用document.forms.test来获取该表单 var oForm = document.forms.test; console.log(oForm.method);//get   字符集   accept-charset 属性是一个空格分隔的字符集列表，规定了服务器处理表单数据所接受的字符集。accept-charset 属性允许指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。该属性的值是用引号包含字符集名称列表。如果可接受字符集与用户所使用的字符即不相匹配的话，浏览器可以选择忽略表单或是将该表单区别对待。此属性的默认值是 \"unknown\"，表示表单的字符集与包含表单的文档的字符集相同。在之前版本的HTML中，不同的字符编码可以用空格或逗号分隔。在HTML5中，只有空格可以允许作为分隔符   提交地址   action属性规定提交表单时，向何处发送表单数据；如果忽略这个属性，表单会重定向到表单所在的URL。这个值可以被  或者  元素中的 formaction属性重载(覆盖)   打开方式   target属性规定在何处打开action URL。共5个值_blank、_self、_parent、_top、framename。   关于target属性的使用移步至此   数据编码   enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码。大多数情况下该属性不需要设置。这个值可以被  或者  元素中的 formenctype属性重载(覆盖)。当 method属性值为 post时， enctype是提交form给服务器的内容的 MIME 类型 。可能的取值有:   application/x-www-form-urlencoded  在发送前编码所有字符（默认）   multipart/form-data  不对字符编码。在使用包含文件上传控件的表单时，必须使用该值   text/plain  空格转换为 \"+\" 加号，但不对特殊字符编码   数据发送   表单可以用两种方式(method)发送数据：GET和POST，默认为GET方法。这个值可以被  或者  元素中的 formmethod属性重载(覆盖) POST方法   如果采用POST方法，浏览器将会按照下面两步来发送数据。首先，浏览器将与action属性中指定的表单处理服务器建立联系，一旦建立连接之后，浏览器就会按分段传输的方法将数据发送给服务器   在服务器端，一旦POST样式的应用程序开始执行时，就应该从一个标志位置读取参数，而一旦读到参数，在应用程序能够使用这些表单值以前，必须对这些参数进行解码。用户特定的服务器会明确指定应用程序应该如何接受这些参数 【应用场景】   1、大数据处理，因为POST方法相比GET方法而言，处理更多字段   2、安全数据，因为GET方法将表单参数直接放在应用程序的 URL 中，这样网络窥探者可以很轻松地捕获它们，还可以从服务器的日志文件中进行摘录；而POST方法则没有这方面的漏洞 GET方法   如果采用GET方法，浏览器会与表单处理服务器建立连接，然后直接在一个传输步骤中发送所有的表单数据：浏览器会将数据直接附在表单的action URL之后。这两者之间用问号进行分隔。 【应用场景】   1、获得最佳表单传输性能，因为GET发送只有少数简单字段   2、简单处理，因为GET方法无需处理编码解码方法   3、传参处理，因为GET方法允许把表单的参数包括进来作为 URL 的一部分 get方法 x: y: Submit a标签传参 post方法 x: y: Submit //GET方法的URL显示为： http://127.0.0.1/form.php?x=1&y=2 //POST方法的URL显示为：http://127.0.0.1/form.php \"; echo \"y: \" .$_REQUEST[\"y\"]; } ?>   自动完成   autocomplete是HTML5新增的一个属性，规定表单是否应该启用自动完成功能。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项   注意：IE浏览器不支持该属性，只有元素拥有name属性，该属性才有效 //该属性默认为on，当设置为off时，规定禁用自动完成功能 打开自动完成 关闭自动完成 x: y: Submit var oForm = document.forms.test; btn1.onclick = function(){ oForm.autocomplete = 'on'; }; btn2.onclick = function(){ oForm.autocomplete = 'off'; };   表单验证   novalidate是HTML5新增的一个属性，规定当提交表单时不对其进行验证   注意：IE9-不支持 打开验证 关闭验证 E-mail: var oForm = document.forms.test; btn1.onclick = function(){ oForm.removeAttribute('novalidate'); }; btn2.onclick = function(){ oForm.setAttribute('novalidate',''); }; "},"HTML/tags/form/form_inputAttr.html":{"url":"HTML/tags/form/form_inputAttr.html","title":"input 元素属性","keywords":"","body":"input元素的30个元素属性   form元素只是一个数据获取元素的容器，而容器内的元素称为表单控件。最常用的表单控件是input元素   accept、alt、checked、disabled、maxlength、name、readonly、size、src、type、value这11个属性是input元素的传统元素属性   autocomplete、autofocus、form、formaction、formenctype、formmethod、formnovalidate、formtarget、height、list、max、min、multiple、novalidate、pattern、placeholder、required、step、width这19个属性是HTML5新增的元素属性   传统属性 name   name属性用于规定input元素的名称，用于对提交到服务器后的表单数据进行标识，或者在客户端通过javascript引用表单数据   注意：只有设置了name属性的表单元素才能在提交表单时传递它们的值 type   type属性用来规定input元素的类型   注意：如果input元素没有设置type属性，或者设置的值在浏览器中不支持，那么输入类型会变成type=\"text\"   详细情况移步至此 accept   accept属性用来规定能够通过文件上传进行提交的文件类型。理论上可以用来限制上传文件类型，然而它只是建设性的，并很可能被忽略，它接受逗号分隔的MIME类型   注意：该属性只能与type=\"file\"配合使用 alt   alt属性为图像输入规定替代文本，功能类似于image元素的alt属性，为用户由于某些原因无法查看图像时提供备选信息   注意：alt属性只能与type=\"image\"的input元素配合使用   checked   checked属性规定在页面加载时应该被预先选定的input元素，也可以在页面加载后，通过javascript进行设置   注意：checked属性只能与type=\"radio\"或type=\"checkbox\"的input元素配合使用 var oInput = document.getElementsByTagName('input'); for(var i = 0,len = oInput.length; i disabled   disabled属性规定应该禁用input元素。被禁用的字段是不能修改的，也不可以使用tab按键切换到该字段，但可以选中或拷贝其文本   [注意1]disabled属性无法与type=\"hidden\"的input元素一起使用   [注意2]对于IE7-浏览器必须设置为disabled=\"disabled\"，而不可以直接设置disabled，否则使用javascript控制时将失效 输入域可用 输入域不可用 btn1.onclick = function(){ test.removeAttribute('disabled'); } btn2.onclick = function(){ test.setAttribute('disabled','disabled'); } readonly   readonly属性规定输入字段为只读。只读字段是不能修改的，但用户仍然可以使用tab按键切换到该字段，还可以选中或拷贝其文本   readonly属性可与type=\"text\"或\"password\"的input元素配合使用   注意：IE7-浏览器不支持使用javascript控制readonly属性 输入域只读 输入域可读写 btn1.onclick = function(){ test.setAttribute('readonly','readonly'); } btn2.onclick = function(){ test.removeAttribute('readonly'); } maxlength   maxlength属性规定输入字段的最大长度，以字符个数计   注意：该属性只能与type=\"text\"或type=\"password\"的input元素配合使用 size   size属性对于type=\"text\"或\"password\"的input元素是可见的字符数；而对于其他类型，是以像素为单位的输入字段宽度   注意：由于size属性是一个可视化的设计属性，推荐使用CSS来代替它 src   src属性作为提交按钮显示的图像的URL   注意：src属性只能且必须与type=\"image\"的input元素配合使用 value   value属性为input元素设定值。对于不同的输入类型，value属性的用法也不同：   type=\"button\"、\"reset\"、\"submit\"用于定义按钮上的显示的文本   type=\"text\"、\"password\"、\"hidden\"用于定义输入字段的初始值   type=\"checkbox\"、\"radio\"、\"image\"用于定义与输入相关联的值   [注意1]type=\"checkbox\"或\"radio\"必须设置value属性   [注意2]value属性无法与type=\"file\"的input元素一起使用 1 2 btn1.onclick = btn2.onclick =function(){ test.value=this.innerHTML; }   新增属性 autocomplete   autocomplete属性可以在个别元素或整个表单上开启或关闭浏览器的自动完成功能。当用户在字段开始键入时，浏览器基于之前键入过的值，显示出在字段中填写的选项   autocomplete属性适用form元素以及以下类型的input元素：text、search、url、telephone、email、password、date pickers、range、color   注意：IE浏览器不支持该属性，只有元素拥有name属性，该属性才有效   详细情况移步至此 autofocus   autofocus属性规定在页面加载时，域自动地获得焦点   autofous属性适用于button、input、keygen、select和textarea元素 novalidate   novalidate属性规定在提交表单时不验证form或input域   novalidate属性适用于form元素以及以下类型的input元素：text、search、url、telephone、email、password、date pickers、range、color   注意：IE9-浏览器不支持   详细情况移步至此 height   height属性用于规定image类型的input标签的图像高度   注意：该属性只适用于image类型的input标签 width   width属性用于规定image类型的input标签的图像宽度   注意：该属性只适用于image类型的input标签 //http://127.0.0.1/form.html?test=123&x=38&y=57# list   大多数输入类型包含一个属性list，它和一个新元素datalist结合使用，这个元素定义当在表单控件输入数据时可用的一个选项列表。datalist元素自身不会在页面显示，而是为其他元素的list属性提供数据   list属性适用于form元素以及以下类型的input元素：text、search、url、telephone、email、password、date pickers、range、color   注意：IE9-浏览器及safari浏览器不支持   详细情况移步至此 min   min属性规定输入域所允许的最大值  max   max属性规定输入域所允许的最小值 step   step属性为输入域规定合法的数字间隔   min、max、step属性适用于以下类型的input元素:date pickers、number、range multiple   multiple属性规定按住ctrl按键，输入字段可以选择多个值   该属性适用于type=\"email\"和\"file\"的input元素   注意：该属性IE9-浏览器不支持 打开文件多选 关闭文件多选 btn1.onclick = function(){ test.setAttribute('multiple',''); }; btn2.onclick = function(){ test.removeAttribute('multiple'); }; pattern   pattern属性规定用于验证input域的模式。模型pattern是正则表达式   pattern属性适用于以下类型的input元素：text、search、url、tel、email、password   注意：IE9-浏览器及safari浏览器不支持 placeholder   placeholder属性提供占位符文字，描述输入域所期待的值。占位符会在输入域为空时显示出现，在输入域获得焦点时消失   placeholder属性适用于以下类型的input元素:text、search、url、tel、email、password   注意：IE9-浏览器不支持   要修改placeholder的颜色需要使用::placeholder ::placeholder{color:green;}   required   required属性规定必须在提交之前填写输入域(不能为空)   required属性适用于以下类型的input元素：text、search、url、telephone、email、password、date pickers、number、checkbox、radio、file   注意：IE9-浏览器及safari浏览器不支持 form   form属性规定输入域所属的一个或多个表单，form属性必须和所属表单的id   form属性适用于所有input标签的类型，若需要引用一个以上的表单时，用空格分隔   注意：IE浏览器不支持该属性，只有元素拥有name属性，该属性才有效   表单重写属性   表单重写属性允许重写form元素的某些属性设定。其中，formnovalidate适用于button或input元素，而其他属性适用于submit或reset的button或input元素 formaction   重写表单的action属性   关于action的详细信息移步至此 First name: Last name: formenctype   重写表单的enctype属性   关于enctype的详细信息移步至此 First name: formmethod   重写表单的method属性   关于method的详细信息移步至此 First name: Last name: formnovalidate   重写表单的novalidate属性   关于novalidate的详细信息移步至此 E-mail: formtarget   重写表单的target属性   关于target的详细信息移步至此 First name: Last name: "},"HTML/tags/form/form_inputType.html":{"url":"HTML/tags/form/form_inputType.html","title":"input 元素的 type 类型","keywords":"","body":"input元素的23种type类型   随着HTML5的出现，input元素新增了多种类型，用以接受各种类型的用户输入。其中，button、checkbox、file、hidden、image、password、radio、reset、submit、text这10个是传统的输入控件，新增的有color、date、datetime、datetime-local、email、month、number、range、search、tel、time、url、week共13个 传统类型   text  定义单行的输入字段，用户可在其中输入文本   password  定义密码字段。该字段中的字符被掩码   file  定义输入字段和 \"浏览\"按钮，供文件上传   radio  定义单选按钮   checkbox  定义复选框   hidden  定义隐藏的输入字段   button  定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）   image  定义图像形式的提交按钮   reset  定义重置按钮。重置按钮会清除表单中的所有数据   submit  定义提交按钮。提交按钮会把表单数据发送到服务器 text   type=\"text\"表示一个文本输入框，它是默认的输入类型，是一个单行的控件，一般是一个带有内嵌框的矩形 password   type=\"password\"表示一个密码输入框，它与文本输入框几乎一模一样，功能上唯一的不同的字母输入后会被隐藏，一般是一连串的点 【默认样式】 chrome/safari/opera padding: 1px 0px; border: 2px inset; firefox padding: 2px; border-width: 1px; ie padding: 2px 1px; border-width: 1px; 【默认宽高】 chrome height: 14px; width: 148px; safari height: 15px; width: 148px; firefox height: 17px; width: 137px; IE9+ height: 14px; width: 147px; IE8- height: 16px; width: 149px; 【重置样式】 padding: 0; border: 1px solid;   注意：IE6浏览器设置的type=\"text\"或\"password\"的input元素的宽高为包含padding和border的宽高   点击下列相应按钮可进行演示 【tips】模拟密码显示隐藏的功能   说明：现在很多软件在密码框右侧都有一个小眼睛，用于设置密码的显示和隐藏。通过更改input元素的type属性得以实现 body{ margin: 0; font-size: 16px; } #show{ padding: 0; border: 1px solid black; height: 20px; width: 200px; line-height: 20px; } #set{ display: inline-block; height: 22px; background-color: rgba(0,0,0,0.5); color: white; line-height: 18px; margin-left: -72px; cursor: pointer; } 显示密码 set.onclick = function(){ if(this.innerHTML == '显示密码'){ this.innerHTML = '隐藏密码'; show.type=\"text\"; }else{ this.innerHTML = '显示密码'; show.type=\"password\"; } } file   type=\"file\"定义输入字段和\"浏览\"按钮，用于文件上传 【重置样式】 padding: 0; border: 0; 【默认宽高】 chrome height: 21px; width: 238px; safari height: 21px; width: 238px; firefox height: 27px; width: 222px; IE9+ height: 21px; width: 220px; IE8 height: 16px; width: 214px; IE7- height: 15px; width: 210px;   注意：IE8-浏览器设置的type=\"file\"的input元素的宽高为包含padding和border的宽高   该类型的input元素支持accept属性和multiple属性   关于accept属性的详细信息移步至此   关于multiple属性的详细信息移步至此 radio   type=\"radio\"定义单选按钮，允许用户从给定数目的选择中选一个选项。同一组按钮，name值一定要一致   注意：radio类型的input元素无法设置padding和border(除IE10-浏览器以外) 【默认样式】 chrome/safari/opera/firefox margin: 3px 3px 0 5px; box-sizing:border-box; ie11 margin: 3px 3px 3px 4px; box-sizing:border-box; ie10- padding: 3px; box-sizing:border-box; 【默认宽高】 chrome/safari/IE height: 13px; width: 13px; firefox height: 16px; width: 16px; 【重置样式】 padding: 0; margin: 0; border: 0; checkbox   type=\"checkbox\"定义多选按钮，允许用户在给定数目的选择中选择一个或多个选项。同一组的按钮，name取值一定要一致   注意：checkbox类型的input元素无法设置padding和border(除IE10-浏览器以外) 【默认样式】 chrome/safari/opera/firefox/ie11 margin: 3px 3px 3px 4px; box-sizing:border-box; ie10- padding: 3px; box-sizing:border-box; 【默认宽高】 chrome/safari/IE height: 13px; width: 13px; firefox height: 16px; width: 16px; 【重置样式】 padding: 0; margin: 0; border: 0;   type=\"radio\"或\"checkbox\"的input元素支持checked属性   关于checked属性的详细情况移步至此 hidden   type=\"hidden\"定义隐藏输入类型用于在表单中增加对用户不可见，但需要提交的额外数据   注意：disabled属性无法与type=\"hidden\"的input元素一起使用 //点击提交按钮后，隐藏域的内容test=12会包含在URL中 button   type=\"button\"的input输入类型定义可点击的按钮，但没有任何行为，常用于在用户点击时启动javascript程序 【button、submit、reset的默认样式】 chrome/safari padding: 1px 6px; border: 2px outset buttonface; box-sizing:border-box; firefox padding: 0 6px; border: 3px outset; box-sizing:border-box; IE9+ padding: 3px 10px; border: 1px outset; box-sizing:border-box; IE8 padding: 3px 10px; border: 1px outset; IE7- padding: 1px 0.5px; border: 1px outset;   注意：IE8-浏览器的box-sizing:content-box;而其他浏览器的box-sizing:border-box;   type=\"button\"的input输入类型和button元素有很多重叠特性   关于button元素的详细信息移步至此 image   type=\"image\"的input输入类型定义图像形式的提交按钮，该类型可以设置width、height、src、alt这四个属性   用图片作为提交按钮会一起发送点击在图片上的x和y坐标，这样可以与服务器端图片地图结合使用，如果图片有name属性，也会随坐标发送 submit   type=\"submit\"的input输入类型用于创建提交表单的按钮 reset   type=\"reset\"的input输入类型用于创建重置表单的按钮 新增类型   color  定义调色板   tel  定义包含电话号码的输入域   email  定义包含email地址的输入域   url  定义包含URL地址的输入域   search  定义搜索域   number  定义包含数值的输入域   range  定义包含一定范围内数字值的输入域   date  定义选取日、月、年的输入域   month  定义选取月、年的输入域   week  定义选取周、年的输入域   time  定义选取月、年的输入域   datetime  定义选取时间、日 月、年的输入域(UTC时间)   datatime-local  定义选取时间、日 月、年的输入域(本地时间) color   type=\"color\"的input输入类型会创建一个调色板用来选择颜色，颜色值以URL编码后的十六进制数值提交。如黑色会以%23000000发送，其中%23是#的URL编码   注意：safari和IE不支持该类型 【默认样式】 chrome width:44px; height:23px; border: 1px solid rgb(169,169,169); padding: 1px 2px; firefox width:46px; height:17px; border: 3px solid rgb(169,169,169); padding: 6px 0; tel   type=\"tel\"的input输入类型用于表示语义上的电话输入域，外观上与type=\"text\"的input输入类型没有差异，在手机端会唤出数字键盘 email   type=\"email\"的input输入类型用于表示语义上的e-mail地址输入域，会自动验证email域的值，外观上与type=\"text\"的input输入类型没有差异，在手机端会唤出英文键盘   email类型的input元素支持multiple属性   注意：IE9-浏览器及safari浏览器不支持 url   type=\"url\"的input输入类型用于表示语义上的url地址的输入域，会自动验证url域的值，外观上与type=\"text\"的input输入类型没有差异   注意：IE9-浏览器及safari浏览器不支持 search   type=\"search\"的input输入类型用于表示语义上的搜索框，外观上与type=\"text\"的input输入类型没有差异 number   type=\"number\"的input输入类型用于处理数字输入，在手机端会唤出数字键盘   注意：IE不支持该类型 【默认样式】 chrome/safari border: 2px inset; padding-left: 1px; firefox border: 1px inset; padding: 2px; 【属性】   max  规定允许的最大值   min  规定允许的最小值   step  规定合法的数字间隔   value  规定默认值   注意：属性的取值可为小数 range   type=\"range\"的input输入类型用于处理包含在一定范围内的数字输入，类似于type=\"number\"的input类型   注意：IE9-不支持该类型 【默认样式】 chrome/safari margin: 2px; firefox border: 1px inset; padding: 1px; margin: 0 9.3px; IE10+ padding: 17px 0 32px; 【属性】   max  规定允许的最大值   min  规定允许的最小值   step  规定合法的数字间隔   value  规定默认值   注意：属性的取值可为小数   注意：如果不设置min和max属性，则默认min=0，max=100   HTML5拥有多个可供选取日期和时间的新输入类型 date   type=\"date\"的input输入类型用于选取日、月、年 month   type=\"month\"的input输入类型用于选取月、年 week   type=\"week\"的input输入类型用于选取周、年 time   type=\"time\"的input输入类型用于选取时、分 datetime   type=\"datetime\"的input输入类型用于选取时、日、月、年(UTC时间) datetime-local   type=\"datetime-local\"的input输入类型用于选取时、日、月、年(本地时间)   注意：IE和firefox这6种日期类型都不支持，chrome不支持datetime类型 【默认样式】 chrome/safari border: 2px inset; padding-left: 1px;   要预设控件的日期和时间，可以用字符串设置value属性 【value属性格式】 date 　　 YYYY-MM-DD time 　　hh:mm:ss.s datetime 　　 YYYY-MM-DDThh:mm:ss:sZ datetime-local YYYY-MM-DDThh:mm:ss:s month 　　　　 YYYY-MM week 　　 YYYY-Wnn YYYY=年 MM=月 DD=日 hh=小时 mm=分钟 ss=秒 s=0.1秒 T=日期与时间之间的分隔符 Z=Zulu时间的时区 Wnn=W周数，从1月的第一周开始是1，直到52   该类型的value属性格式还可以用在min和max的属性里，用来创建时间跨度；step可以用来设置移动的刻度   注意：chrome不支持该类型的step设置 "},"HTML/tags/form/form_formCont.html":{"url":"HTML/tags/form/form_formCont.html","title":"表单控件","keywords":"","body":"表单控件   input元素无疑是一个庞大和复杂的元素，但它并不是唯一的表单控件。还有button、select、option、label、optgroup、textarea、fieldset、legend这八个传统表单控件，datalist、progress、meter、output、keygen这五个新增表单控件   传统控件   button  定义一个按钮   select   定义一个下拉列表   option  定义下拉列表中的一个选项   optgroup  定义选项组，用于组合选项   textarea  定义多行的文本输入控件   fieldset  分组表单内的相关元素   legend  定义fieldset元素的标题   label    定义input元素的标注 button   button元素用来定义一个按钮，button元素内部可以放置文本或图像或其他多媒体内容。但唯一禁止使用的元素是图像映射，因为它对鼠标和键盘敏感的动作会干扰表单按钮的行为   始终为button元素设置type属性，IE7-浏览器的默认类型是button，而其他浏览器的默认类型是submit   IE7-提交button元素之间的文本，而其他浏览器则会提交value属性的内容   元素比元素更易样式化。可以添加内联HTML内容（如， 甚至），并使用:after和:before伪元素实现复杂的渲染，而只有文本值属性 //IE7-浏览器:按下提交按钮时，URL添加?btn=1 //其他浏览器:按下button按钮时，URL添加?btn=2 1 【默认样式】 chrome/safari padding: 1px 6px; border-width:1px; firefox padding: 0px 6px; border-width:2px; IE8-IE11 padding: 3px 10px; border-width:1px; IE7- padding: 1px 0.5px; border-width:1px; 【属性】   autofocus   规定当页面加载时按钮自动获得焦点   disabled   规定应该禁用该按钮   form  规定按钮属性一个或多个表单   formaction  覆盖form元素的action属性   formenctype  覆盖form元素的enctype属性   formmethod  覆盖form元素的method属性   formnovaliadate  覆盖form元素的novalidate属性   formtarget  覆盖form元素的target属性   name   规定按钮的名称   type   规定按钮的类型   value  规定按钮的初始值 select   select元素用来定义一个下拉列表，包含任意数量的option和optgroup元素 【属性】   autofocus  规定在页面加载后文本区域自动获得焦点   disabled  规定禁用该下拉列表   form  规定文本区域所属的一个或多个表单   multiple  规定可选择多个选项   name  规定下拉列表的名称   size  规定下拉列表中可见选项的数目   注意：size不可为0，默认为1 【默认样式】 chrome/safari border: 1px solid; box-sizing: border-box; firefox padding: 1px; box-sizing: border-box; IE9+ border: 1px solid; box-sizing: border-box; IE8- border: 1px solid;   注意：IE8-浏览器box-sizing:content-box;而其他浏览器box-sizing:border-box 【默认宽高】 chrome width:65px; height:16px; firefox width:54px; height:21px; safari width: 56px; height: 15px; IE8+ width:74px; height:17px;   注意：safari浏览器无法设置高度 option   option元素定义下拉列表中的一个选项   option元素有两种应用场景，除了用于下拉列表select外，还可以用于选项列表datalist中 【属性】   disabled  规定此选项应在首次加载时被禁用   label  定义当使用optgroup时所使用的标注，替代option元素内容   注意：firefox不支持label属性   selected  规定选项在首次显示在列表中时表现为选中状态   value  定义送往服务器的选项值   注意：当设置value值时，服务器提交的是value的值；否则提交给服务器的是option的元素内容 【默认样式】 chrome padding: 0 2px 1px;   注意：option无法设置margin、padding、border等盒模型样式 optgroup   optgroup元素定义选项组，用于组合选项   注意：optgroup无法设置margin、padding、border等盒模型样式 【属性】   label  为选项组规定描述(必须)   disabled  规定禁用该选项组(可选) 启用 禁用 可多选 不可多选 size=1 size=2 size=3 不设置size 1 2 3 4 a b c d 一 二 三 四 var select = document.getElementById('select'); btn1a.onclick = function(){ select.removeAttribute('disabled'); } btn1b.onclick = function(){ select.setAttribute('disabled',''); } btn2a.onclick = function(){ select.setAttribute('multiple',''); } btn2b.onclick = function(){ select.removeAttribute('multiple'); } btn3a.onclick = function(){ select.setAttribute('size','1'); } btn3b.onclick = function(){ select.setAttribute('size','2'); } btn3c.onclick = function(){ select.setAttribute('size','3'); } btn3d.onclick = function(){ select.removeAttribute('size'); } textarea   textarea定义多行的文本输入控件，文本区可容纳无限数量的文本   注意：浏览器不允许textarea嵌套textarea 【默认样式】 chrome/firefox/safari/IE padding: 2px; border: 1px solid; 【默认宽高】 chrome width: 137px; height: 30px; firefox width: 181px; height: 51px; safari width: 181px; height: 32px; IE9+ width: 160px; height: 30px;   注意：IE8-浏览器宽高设置不包含滚动条；其他浏览器宽高设置包含滚动条 【样式重置】 overflow: auto; resize: none; float: left; outline: none; 【属性】   name  规定文本区的名称   value  表示文本区的值   disabled  规定禁用该文本区       注意：IE7-浏览器不支持通过setAttribute('disabled','')的写法，必须设置为setAttribute('disabled','disabled')   readonly  规定文本区为只读    注意：IE7-浏览器不支持通过javascript设置readonly属性 测试内容 btn1.onclick = function(){ test.setAttribute('disabled',''); }; btn2.onclick = function(){ test.removeAttribute('disabled'); }; btn3.onclick = function(){ test.setAttribute('readonly','readonly'); }; btn4.onclick = function(){ test.removeAttribute('readonly'); };   form  规定文本区域所属的一个或多个表单   注意：IE浏览器不支持该属性   autofous  规定在页面加载后文本区域自动获得焦点   注意：IE9-浏览器不支持该属性   required  规定文本区域是必填的   注意：IE9-浏览器和safari浏览器不支持该属性   placeholder  规定描述文本区域预期值的简短提示   注意：IE9-浏览器不支持该属性 var test = document.getElementById('test'); btn1.onclick = function(){ test.setAttribute('placeholder','123'); }; btn2.onclick = function(){ test.setAttribute('placeholder','abc'); }; btn3.onclick = function(){ test.setAttribute('required',''); }; btn4.onclick = function(){ test.removeAttribute('required'); };   maxlength  规定文本区域的最大字符数   注意：IE9-浏览器不支持该属性 btn1.onclick = function(){ test.setAttribute('maxlength','0'); }; btn2.onclick = function(){ test.setAttribute('maxlength','1'); }; btn3.onclick = function(){ test.setAttribute('maxlength','6'); }; btn4.onclick = function(){ test.removeAttribute('maxlength'); };   cols  规定文本区内的可见列数   rows  规定文本区内的可见行数   注意：可以用cols和rows来规定textarea的尺寸，但更好的办法是使用CSS的height和width属性 cols: rows: var cols = document.getElementById('cols'); var rows = document.getElementById('rows'); var test = document.getElementById('test'); var set = document.getElementById('set'); set.onclick = function(){ test.setAttribute('cols',cols.value); test.setAttribute('rows',rows.value); };   wrap  规定当在表单中提交时，文本区域中折行如何处理   当wrap=\"soft\"，表示表单提交时，虽然文字在屏幕上折行，但提交的数据里不会有换行符(默认值)；而当wrap=\"hard\"，表示表单提交时，提交的数据包含文本换行符%0D%0A //hard:?test=111111111111111111111%0D%0A1# //soft:?test=1111111111111111111111111111# var hard = document.getElementById('hard'); var soft = document.getElementById('soft'); var test = document.getElementById('test'); var set = document.getElementById('set'); hard.onclick = function(){ test.setAttribute('wrap','hard'); } soft.onclick = function(){ test.setAttribute('wrap','soft'); } fieldset   fieldset元素用于将表单内的相关元素分组，提升可访问性，多数浏览器用一个简单的边框来显示fieldset 【默认样式】 chrome/firefox/safari display:block; margin: 0 2px; border: 2px groove threedface; padding: 5px 12px 10px; IE9+ display: block; margin: 0 2px; border: 1px solid; padding: 3px 3px 4px; IE8 display: block; margin: 0 2px; border: 1px solid; padding: 1px 3px 4px; IE7- display: block; border: 1px solid; padding: 1px 3px 4px; 【属性】   disabled  禁用fieldset   form  规定fieldset所属的一个或多个表单     name  规定fieldset的名称 legend   legend元素用于定义fieldset元素的标题 健康信息 身高： 体重： label   label元素为input元素定义标注，建立文字标签与表单控件的关联。在label元素内点击文本会触发此控件，选择该文本时浏览器会自动把焦点转到和标签相关的表单控件上   label元素有两种用法：一种是使用for属性，另一种是将表单控件嵌套到label内部。但IE6浏览器只识别使用for属性的方法 【属性】   for  规定label绑定到哪个表单元素   form  规定label字段所属的一个或多个表单   注意：label标签的for属性要与相关元素的id属性相同 使用for方法 Male Female 使用嵌套方法 Male Female 【js属性】   label控件有三个javascript属性，分别是form、htmlFor和control   form表示label控件所归属的表单   htmlFor表示label控件的for属性的字符串值   control表示label控件所指定的input控件(注意：IE浏览器不支持) 我是label var myLabel = document.getElementById('myLabel'); console.log(myLabel.form);// console.log(myLabel.htmlFor);//'myFile' console.log(myLabel.control);//   新增控件   datalist  定义输入域的选项列表   keygen  定义密钥对生成器，用于生成密钥   output  用于显示计算的结果   progress  用于显示进度(前进量)   meter  用于显示度量(剩余量) datalist   datalist元素规定输入域的选项列表，列表是通过datalist内的option元素创建的。如果需要把datalist绑定到输入域，需要把输入域的list属性引用datalist的id。option元素一定要设置value属性   注意：IE9-浏览器及safari浏览器不支持 keygen   keygen规定用于表单的密钥生成器字段，当提交表单时，私钥存储在本地，公钥发送到服务器   注意：safari和IE不支持该属性，chrome部分支持该属性 【属性】   autofocus  使用keygen字段在页面加载时获得焦点   challenge  如果使用，则将keygen的值设置为在提交时询问   disabled  禁用keygen字段   form  定义该keygen字段所属的一个或多个表单   keytype  定义keytype，rsa生成RSA密钥(默认)   name  定义keygen元素的唯一名称 //firefox: 1->usr_name=1&security=MIIBOjCBpDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1HUwmm%2B75QTnuDXC%0D%0AnUsL8cD8KkncFnA6TRaJttYss0Oi6dVzOPOtdK0O7wxD4%2BIhjSMZRD%2FddKFciZw0%0D%0AURyAimXxe%2FlDKmR3Nb1SzmqA7RJnns%2FA%2BduiYeeIIiMSL2ydUOvQvVFYMtaDkWra%0D%0AtpQfeWv1Hjz9hb7HlGzOUbtGrAECAwEAARYAMA0GCSqGSIb3DQEBBAUAA4GBAJ0I%0D%0ATWv7CdcNzqkaq5OpN6GHWtrlIpD5UAL%2FOiFDICb%2F8PFgV7FQk0MaGwj5XzQfEu4B%0D%0A6YlAbyz2l91I9%2FJW6Oerru5wL646OpvnTvD2U%2FzByU%2FHWp0BRNeDqntMAsGvzl6D%0D%0AoNsHTwLjDUGYVILge4syfcQVRpFRZiyVRaNlIJT9# Username: Encryption: output   output元素用于显示计算的结果，这是一个语义化标签，定义不同类型的输出，比如脚本的输出   注意：IE浏览器不支持该属性 【属性】   for  定义输出域相关的一个或多个元素   form  定义输入字段所属的一个或多个元素   name  定义对象的唯一名称 0100 + = progress   progress元素用来标示任务的进度或进程(常用于表示过程)   注意：IE9-浏览器及safari浏览器不支持 【属性】   max  规定任务一共需要多少工作   value  规定已经完成多少工作   如果progress控件什么属性都不设置，则会有进度条左右往返运动的效果 下载进度： var oTimer; btn.onclick = function(){ if(oTimer){ return; } oTimer = setInterval(function(){ test.value++; if(test.value >= test.max){ clearInterval(oTimer); } },50); } meter   meter元素用于显示剩余容量或剩余库存(常用于表示状态)   注意：IE浏览器及safari浏览器不支持 【属性】   form  规定meter元素所属的一个或多个表单   high  规定被视作高的值的范围   low  规定被视作低的值的范围   max  规定范围的最大值   min  规定范围的最小值   optimum  规定度量的最优值   value  规定度量的当前值(必需)   注意：min 小于 low 小于 high 小于 max 库存量： var oTimer; btn.onclick = function(){ if(oTimer){ return; } oTimer = setInterval(function(){ test.value++; if(test.value >= test.max){ clearInterval(oTimer); } },50); };   如果meter标签的value属性，取值为小数，如0.3，且没有max属性值时，则颜色块显示为宽高的30% "},"HTML/tags/form/form_formBeau.html":{"url":"HTML/tags/form/form_formBeau.html","title":"表单美化","keywords":"","body":"表单美化   由于一些系统原生的表单控件在各个浏览器中显示效果不一致，且无法设置某些关键CSS样式，为了保证表单在各浏览器中的兼容性，表单美化就是不得不做的一件事了   单选按钮 【实现效果】 【实现过程】 body{ margin: 0; font: 16px/20px \"宋体\"; } .box{ width: 500px; height: 100px; line-height: 100px; margin: 0 auto; border: 1px solid black; text-align: center; } .box label{ position:relative; padding-left: 20px; } .box input{ visibility: hidden; } .box i{ position: absolute; top: -2px; left: -2px; height: 19px; width: 19px; background: url('https://demo.xiaohuochai.site/radiobutton.gif') no-repeat -14px -18px; } .box label:hover{ color: red; } .box label:hover i{ background-position: -14px -118px; } .box label.selected i{ background-position: -14px -218px; } https://demo.xiaohuochai.site 选择一项游戏方式： 咻一咻 摇一摇 扭一扭 var oBox = document.getElementById('box'); var aLabel = oBox.getElementsByTagName('label'); for(var i = 0, leni = aLabel.length; i   多选按钮 【实现效果】 【实现过程】 body{ margin: 0; font: 16px/20px \"宋体\"; } .box{ width: 600px; height: 100px; line-height: 100px; margin: 0 auto; border: 1px solid black; text-align: center; } .box label{ position:relative; padding-left: 20px; } .box input{ visibility: hidden; } .box i{ position: absolute; top: -2px; left: -2px; height: 19px; width: 19px; background: url('https://demo.xiaohuochai.site/checkbox.gif') no-repeat -14px -18px; } .box label:hover{ color: red; } .box label:hover i{ background-position: -14px -118px; } .box label.selected i{ background-position: -14px -218px; } https://demo.xiaohuochai.site 选择日常手机交易方式(可多选)： 支付宝 微信 百度钱包 var oBox = document.getElementById('box'); var aLabel = oBox.getElementsByTagName('label'); for(var i = 0, leni = aLabel.length; i   下拉列表 【实现效果】 【实现过程】 body{ margin: 0; font: 16px/20px \"宋体\"; } ul{ margin: 0; padding: 0; list-style: none; } .box{ width: 300px; height: 40px; margin: 0 auto; border: 1px solid black; } .box .show{ background-color: red; line-height: 30px; padding: 5px; } .box .show-area{ color: white; vertical-align: middle; } .box .show-select{ position: relative; display: inline-block; vertical-align: middle; width: 200px; height: 28px; border: 1px solid #999; background-color: white; text-indent: 20px; cursor: pointer; } .box .show-selectAdd{ color: #999; } .box .show-select i{ position: absolute; height: 0; width: 0; top: 0; right: 0; margin-top: 12px; margin-right: 5px; border: 5px solid transparent; border-top-color: black; } .box .show-selectAdd i{ border: 5px solid transparent; border-bottom-color: black; margin-top: 8px; } .box .list{ border: 1px solid #dfdfdf; border-top: none; display: none; } .box .list-in{ height: 30px; line-height: 30px; text-indent: 74px; border-bottom: 1px solid #dfdfdf; cursor: pointer; } .box .list-in:hover{ color: red; } 地址: 朝阳区 朝阳区 海淀区 东城区 西城区 丰台区 石景山区 var oBox = document.getElementById('box'); var oDiv = oBox.getElementsByTagName('div')[0]; var oShow = oDiv.getElementsByTagName('span')[0]; var oUl = oBox.getElementsByTagName('ul')[0]; var aLi = oUl.getElementsByTagName('li'); //简单思路 //[1]点击oDiv时，默认文字为黑色，三角向上，变成文字为#999，三角向下；简化为增加一个show-selectAdd类名；oUl从隐藏变成显示 oDiv.onclick = function(e){ //阻止冒泡 e = e || event; if(e.stopPropagation){ e.stopPropagation(); }else{ e.cancelBubble = true; } oShow.className = 'show-select show-selectAdd'; oUl.style.display = 'block'; } //[2]点击oUl的li时，oUl从隐藏变成显示，文字和三角恢复到黑色和向上的默认样式；并且文字内容变成当前点击的li的内容 for(var i = 0,len=aLi.length; i '; } } //[3]点击box以外的其他部分时，oUl从隐藏变成显示，文字和三角恢复到黑色和向上的默认样式 document.onclick = function(){ this.getElementsByTagName('span')[0].className = 'show-select'; oUl.style.display = 'none'; } "},"HTML/apply/apply_wrap.html":{"url":"HTML/apply/apply_wrap.html","title":"换行","keywords":"","body":"换行 值 描述 normal 默认。空白会被浏览器忽略。 pre 空白会被浏览器保留。其行为方式类似 HTML 中的 标签。 nowrap 文本不会换行，文本会在在同一行上继续，直到遇到 标签为止。 pre-wrap 保留空白符序列，但是正常地进行换行。 pre-line 合并空白符序列，但是保留换行符。 inherit 规定应该从父元素继承 white-space 属性的值。 /* 强制不换行 */ .div { white-space: nowrap; } /* 自动换行 */ .div { word-wrap: break-word; word-break: normal; } /* 强制英文单词断行 */ .div { word-break: break-all; } "},"HTML/apply/apply_ellipsis.html":{"url":"HTML/apply/apply_ellipsis.html","title":"省略号","keywords":"","body":"省略号 一行省略号 // 一行省略号 .ellipsis-line1 { white-space: nowrap; text-overflow: ellipsis; overflow: hidden; word-break: break-all; } 两行省略号 // 两行省略号 .ellipsis-line2 { text-overflow: -o-ellipsis-lastline; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; line-clamp: 2; -webkit-box-orient: vertical; } "},"HTML/apply/apply_scrollbar.html":{"url":"HTML/apply/apply_scrollbar.html","title":"滚动条","keywords":"","body":"scrollbar-滚动条样式美化 参考地址： https://segmentfault.com/a/1190000012800450?utm_source=tag-newest 1. 属性介绍 ::-webkit-scrollbar //滚动条整体部分 ::-webkit-scrollbar-button //滚动条两端的按钮 ::-webkit-scrollbar-track // 外层轨道 ::-webkit-scrollbar-track-piece //内层轨道，滚动条中间部分（除去） ::-webkit-scrollbar-thumb //滚动条里面可以拖动的那个 ::-webkit-scrollbar-corner //边角 ::-webkit-resizer ///定义右下角拖动块的样式 2. 全部属性 :horizontal//适用于任何水平方向上的滚动条 :vertical//适用于任何垂直方向的滚动条 :decrement//适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮 :increment//适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮 :start//适用于按钮和轨道碎片。表示对象（按钮轨道碎片）是否放在滑块的前面 :end //适用于按钮和轨道碎片。表示对象（按钮轨道碎片）是否放在滑块的后面 :double-button//适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。 :single-button//适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。 :no-button//表示轨道结束的位置没有按钮。 :corner-present//表示滚动条的角落是否存在。 :window-inactive//适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。 3. 修改css /*定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/ ::-webkit-scrollbar { width:16px; height:16px; background-color:#F5F5F5; } /*定义滚动条轨道 内阴影+圆角*/ ::-webkit-scrollbar-track { -webkit-box-shadow:inset 0 0 6px rgba(0,0,0,0.3); border-radius:10px; background-color:#F5F5F5; } /*定义滑块 内阴影+圆角*/ ::-webkit-scrollbar-thumb { border-radius:10px; -webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3); background-color:#555; } ::-webkit-scrollbar-track-piece:start { /* Select the top half (or left half) or scrollbar track individually */ } ::-webkit-scrollbar-thumb:window-inactive { /* Select the thumb when the browser window isn't in focus */ } ::-webkit-scrollbar-button:horizontal:decrement:hover { /* Select the down or left scroll button when it's being hovered by the mouse */ } 滚动条样式修改 scrollbar-corner：边角，两个滚动条的交汇处 ::-webkit-scrollbar-corner{ background-color: rgba(0,0,0,.4); } "}}